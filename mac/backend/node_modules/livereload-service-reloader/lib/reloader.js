(function() {
  var Array_pushAll, RelPathList, ReloaderService, soa,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  soa = require('livereload-soa');

  RelPathList = require('pathspec').RelPathList;

  module.exports = function(carrier, options) {
    if (options == null) {
      options = {};
    }
    options.name || (options.name = 'reloader');
    return new ReloaderService(carrier, options);
  };

  ReloaderService = (function(_super) {
    __extends(ReloaderService, _super);

    function ReloaderService(carrier, options) {
      ReloaderService.__super__.constructor.call(this, carrier, options);
      this._reloadTimer = null;
      this._resetPendingRequest();
      this._liveReloadMasks = RelPathList.parse(["*.css", "*.png", "*.jpg", "*.gif"]);
    }

    ReloaderService.prototype.on_reload = function(command, callback) {
      this._appendRequestToPending(command);
      this._scheduleReloading();
      return callback();
    };

    ReloaderService.prototype.dispose = function(callback) {
      return callback();
    };

    ReloaderService.prototype._resetPendingRequest = function() {
      return this._pendingRequest = {
        changes: [],
        forceFullReload: false,
        fullReloadDelay: 0,
        enableOverride: false
      };
    };

    ReloaderService.prototype._appendRequestToPending = function(_arg) {
      var changes, enableOverride, forceFullReload, fullReloadDelay, _base, _base1;
      changes = _arg.changes, forceFullReload = _arg.forceFullReload, fullReloadDelay = _arg.fullReloadDelay, enableOverride = _arg.enableOverride;
      if (changes != null) {
        Array_pushAll(this._pendingRequest.changes, changes);
      }
      if (forceFullReload != null) {
        (_base = this._pendingRequest).forceFullReload || (_base.forceFullReload = forceFullReload);
      }
      if (enableOverride != null) {
        (_base1 = this._pendingRequest).enableOverride || (_base1.enableOverride = enableOverride);
      }
      if (fullReloadDelay != null) {
        return this._pendingRequest.fullReloadDelay = Math.max(this._pendingRequest.fullReloadDelay, fullReloadDelay);
      }
    };

    ReloaderService.prototype._scheduleReloading = function() {
      var delay;
      delay = (this._isFullReloadPending() ? this._pendingRequest.fullReloadDelay : 0);
      if (this._reloadTimer) {
        clearTimeout(this._reloadTimer);
      }
      return this._reloadTimer = setTimeout(this._performReload.bind(this), delay);
    };

    ReloaderService.prototype._performReload = function() {
      var change, isFull, messages;
      this._reloadTimer = null;
      isFull = this._isFullReloadPending();
      messages = (function() {
        var _i, _len, _ref, _results;
        _ref = this._pendingRequest.changes;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          change = _ref[_i];
          _results.push({
            command: 'reload',
            path: change.path,
            localPath: change.localPath,
            originalPath: change.originalPath || '',
            liveCSS: !this._pendingRequest.forceFullReload,
            enableOverride: this._pendingRequest.enableOverride
          });
        }
        return _results;
      }).call(this);
      this._log('info', "Send browser reload messages: %j", messages);
      this.send({
        service: 'server',
        command: 'reload',
        messages: messages
      });
      return this._resetPendingRequest();
    };

    ReloaderService.prototype._isFullReloadPending = function() {
      return this._pendingRequest.forceFullReload || !this._canRefreshChangesLive(this._pendingRequest.changes);
    };

    ReloaderService.prototype._canRefreshChangesLive = function(changes) {
      var _this = this;
      return changes.every(function(change) {
        return _this._canRefreshPathLive(change.path);
      });
    };

    ReloaderService.prototype._canRefreshPathLive = function(path) {
      return this._liveReloadMasks.matches(path);
    };

    ReloaderService.prototype._log = function(level, text) {
      return this.send({
        service: 'kernel',
        command: 'log',
        level: level,
        text: text
      });
    };

    return ReloaderService;

  })(soa.ServiceImpl);

  Array_pushAll = function(array, source) {
    return array.push.apply(array, source);
  };

}).call(this);
