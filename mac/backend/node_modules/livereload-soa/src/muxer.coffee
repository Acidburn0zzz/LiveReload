module.exports = (carrier) -> new MuxerService(carrier)

class MuxerService
  constructor: (carrier) ->
    @carrier = carrier.pipe(this)
    @_serviceCarriers = []

  onmessage: (message) ->
    console.error "Node muxer incoming: %j", message
    if service = @_findService(message)
      service.onmessage(message)
    else
      throw new Error("Cannot route message")

  ondisconnect: ->
    @_serviceCarriers.forEach (carrier) =>
      carrier.service.ondisconnect()

  dispose: (callback) ->
    n = @_serviceCarriers.length
    for carrier in @_serviceCarriers
      carrier.service.dispose =>
        if (n -= 1) == 0
          callback()
    return

  send: (message) ->
    if service = (message.service and @_findService(message))
      service.onmessage(message)
    else
      @carrier.send(message)

  pipe: (service) ->
    carrier = new MuxerCarrier(this, service)
    @_serviceCarriers.push(carrier)
    return carrier

  updateProvidedServices: ->
    providedServices = []
    @_serviceCarriers.forEach (carrier) =>
      providedServices.push.apply(providedServices, carrier.providedServices)
    @send({ command: 'hello', services: providedServices })

  _findService: (message) ->
    for carrier in @_serviceCarriers
      if carrier.providedServices.indexOf(message.service) != -1
        return carrier.service
    return null


class MuxerCarrier

  constructor: (@muxer, @service) ->
    @providedServices = []

  send: (message) ->
    if message.command == 'hello'
      @providedServices = message.services
      @muxer.updateProvidedServices()
    else
      @muxer.send(message)
