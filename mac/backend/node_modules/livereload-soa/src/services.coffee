# this file is stale and is only committed for language comparison purposes
class ServiceImpl
  constructor: (@carrier, @options) ->
    @name = options.name

    @pendingCallbacks = {}
    @nextCallbackId = 1

    @initialize()

    @carrier = carrier.pipe(this)
    @send({command: 'hello', services: [@name]})

  initialize: ->

  send: (message) ->
    @carrier.send(message)

  sendWithReply: (message, callback) ->
    callbackId = @nextCallbackId++
    @pendingCallbacks[callbackId] = callback

    message.reply = { service: @name, callback: callbackId }
    @send(message)

  onmessage: (message) ->
    callbackId = message.callback
    if typeof(callbackId) is 'number'
      if callback = @pendingCallbacks[callbackId]
        delete @pendingCallbacks[callbackId]
        callback(message)

    else if message.command
      handler = this['on_' + message.command]
      if !handler
        throw new Error("Unknown command #{message.command}")

      handler.call this, message, (error, result) =>
        if reply = message.reply
          if error
            reply.error = error
          else
            reply.result = result
          @send(reply)
        else if (error)
          throw error

  ondisconnect: ->

exports.ServiceImpl = ServiceImpl
