events = require('events')

module.exports =
class NodeStreamCarrier extends events.EventEmitter
  constructor: (@input, @output) ->
    super()

    @buffer = ""

    @input.setEncoding('utf8')
    @input.resume()

    @input.on 'data', (chunk) =>
      lines = (@buffer + chunk).split("\n")
      @buffer = lines.pop()

      lines.forEach(@_processLine)

    @input.on 'end', =>
      @emit('end')

  _processLine: (line) =>
    line = line.trim()
    if line == ''
      return  # empty lines are handy when testing in console mode

    message = JSON.parse(line)
    @emit('message', message)

  send: (message) ->
    payload = JSON.stringify(message)
    buf = new Buffer(payload + "\n")
    @output.write("#{payload}\n")

  pipe: (service) ->
    @on('message', service.onmessage.bind(service))
    if service.ondisconnect
      @on('end', service.ondisconnect.bind(service))

    return this
