(function() {
  var MuxerCarrier, MuxerService;

  module.exports = function(carrier) {
    return new MuxerService(carrier);
  };

  MuxerService = (function() {
    function MuxerService(carrier) {
      this.carrier = carrier.pipe(this);
      this._serviceCarriers = [];
    }

    MuxerService.prototype.onmessage = function(message) {
      var service;
      console.error("Node muxer incoming: %j", message);
      if (service = this._findService(message)) {
        return service.onmessage(message);
      } else {
        throw new Error("Cannot route message");
      }
    };

    MuxerService.prototype.ondisconnect = function() {
      var _this = this;
      return this._serviceCarriers.forEach(function(carrier) {
        return carrier.service.ondisconnect();
      });
    };

    MuxerService.prototype.dispose = function(callback) {
      var carrier, n, _i, _len, _ref,
        _this = this;
      n = this._serviceCarriers.length;
      _ref = this._serviceCarriers;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        carrier = _ref[_i];
        carrier.service.dispose(function() {
          if ((n -= 1) === 0) {
            return callback();
          }
        });
      }
    };

    MuxerService.prototype.send = function(message) {
      var service;
      if (service = message.service && this._findService(message)) {
        return service.onmessage(message);
      } else {
        return this.carrier.send(message);
      }
    };

    MuxerService.prototype.pipe = function(service) {
      var carrier;
      carrier = new MuxerCarrier(this, service);
      this._serviceCarriers.push(carrier);
      return carrier;
    };

    MuxerService.prototype.updateProvidedServices = function() {
      var providedServices,
        _this = this;
      providedServices = [];
      this._serviceCarriers.forEach(function(carrier) {
        return providedServices.push.apply(providedServices, carrier.providedServices);
      });
      return this.send({
        command: 'hello',
        services: providedServices
      });
    };

    MuxerService.prototype._findService = function(message) {
      var carrier, _i, _len, _ref;
      _ref = this._serviceCarriers;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        carrier = _ref[_i];
        if (carrier.providedServices.indexOf(message.service) !== -1) {
          return carrier.service;
        }
      }
      return null;
    };

    return MuxerService;

  })();

  MuxerCarrier = (function() {
    function MuxerCarrier(muxer, service) {
      this.muxer = muxer;
      this.service = service;
      this.providedServices = [];
    }

    MuxerCarrier.prototype.send = function(message) {
      if (message.command === 'hello') {
        this.providedServices = message.services;
        return this.muxer.updateProvidedServices();
      } else {
        return this.muxer.send(message);
      }
    };

    return MuxerCarrier;

  })();

}).call(this);
