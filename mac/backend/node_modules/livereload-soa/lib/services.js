(function() {
  var ServiceImpl;

  ServiceImpl = (function() {
    function ServiceImpl(carrier, options) {
      this.carrier = carrier;
      this.options = options;
      this.name = options.name;
      this.pendingCallbacks = {};
      this.nextCallbackId = 1;
      this.initialize();
      this.carrier = carrier.pipe(this);
      this.send({
        command: 'hello',
        services: [this.name]
      });
    }

    ServiceImpl.prototype.initialize = function() {};

    ServiceImpl.prototype.send = function(message) {
      return this.carrier.send(message);
    };

    ServiceImpl.prototype.sendWithReply = function(message, callback) {
      var callbackId;
      callbackId = this.nextCallbackId++;
      this.pendingCallbacks[callbackId] = callback;
      message.reply = {
        service: this.name,
        callback: callbackId
      };
      return this.send(message);
    };

    ServiceImpl.prototype.onmessage = function(message) {
      var callback, callbackId, handler,
        _this = this;
      callbackId = message.callback;
      if (typeof callbackId === 'number') {
        if (callback = this.pendingCallbacks[callbackId]) {
          delete this.pendingCallbacks[callbackId];
          return callback(message);
        }
      } else if (message.command) {
        handler = this['on_' + message.command];
        if (!handler) {
          throw new Error("Unknown command " + message.command);
        }
        return handler.call(this, message, function(error, result) {
          var reply;
          if (reply = message.reply) {
            if (error) {
              reply.error = error;
            } else {
              reply.result = result;
            }
            return _this.send(reply);
          } else if (error) {
            throw error;
          }
        });
      }
    };

    ServiceImpl.prototype.ondisconnect = function() {};

    return ServiceImpl;

  })();

  exports.ServiceImpl = ServiceImpl;

}).call(this);
