(function() {
  var NodeStreamCarrier, events,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  events = require('events');

  module.exports = NodeStreamCarrier = (function(_super) {
    __extends(NodeStreamCarrier, _super);

    function NodeStreamCarrier(input, output) {
      var _this = this;
      this.input = input;
      this.output = output;
      this._processLine = __bind(this._processLine, this);
      NodeStreamCarrier.__super__.constructor.call(this);
      this.buffer = "";
      this.input.setEncoding('utf8');
      this.input.resume();
      this.input.on('data', function(chunk) {
        var lines;
        lines = (_this.buffer + chunk).split("\n");
        _this.buffer = lines.pop();
        return lines.forEach(_this._processLine);
      });
      this.input.on('end', function() {
        return _this.emit('end');
      });
    }

    NodeStreamCarrier.prototype._processLine = function(line) {
      var message;
      line = line.trim();
      if (line === '') {
        return;
      }
      message = JSON.parse(line);
      return this.emit('message', message);
    };

    NodeStreamCarrier.prototype.send = function(message) {
      var buf, payload;
      payload = JSON.stringify(message);
      buf = new Buffer(payload + "\n");
      return this.output.write("" + payload + "\n");
    };

    NodeStreamCarrier.prototype.pipe = function(service) {
      this.on('message', service.onmessage.bind(service));
      if (service.ondisconnect) {
        this.on('end', service.ondisconnect.bind(service));
      }
      return this;
    };

    return NodeStreamCarrier;

  })(events.EventEmitter);

}).call(this);
