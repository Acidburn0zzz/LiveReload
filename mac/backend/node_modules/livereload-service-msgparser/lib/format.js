// Generated by CoffeeScript 1.6.3
(function() {
  var ANSI_ESCAPE_RE, BETTER_ESC_CHAR, BETTER_ESC_CHAR_RE, MessageFormat,
    __slice = [].slice;

  ANSI_ESCAPE_RE = /(?:\x1b[@A-Z\\\]^_]|(?:\x1b\[|\x9B).*?[@-~])+/g;

  BETTER_ESC_CHAR = '\u241B';

  BETTER_ESC_CHAR_RE = /\u241B/g;

  module.exports = MessageFormat = (function() {
    MessageFormat.WILDCARDS = {
      file: '[^\\n]+?',
      line: '\\d+',
      column: '\\d+',
      message: '\\S[^\\n]+?'
    };

    function MessageFormat(pattern, createMessage) {
      var index,
        _this = this;
      this.pattern = pattern;
      this.createMessage = createMessage != null ? createMessage : (function() {
        return {};
      });
      this.indices = {};
      this.overrides = {};
      this.used = false;
      if (typeof this.pattern === 'string') {
        this.options = {};
      } else {
        this.options = this.pattern;
        this.pattern = this.options.pattern;
        if (typeof this.pattern !== 'string') {
          throw new Error("When an error/warning pattern is specified as an object, it must contain a string 'pattern' key; got: " + (JSON.stringify(this.options, null, 2)));
        }
      }
      if (this.options.message) {
        this.overrides.message = this.options.message;
      }
      this.processedPattern = this.pattern;
      if (this.processedPattern.match(/<ESC>/)) {
        this.matchEscapes = true;
        this.processedPattern = this.processedPattern.replace(/<ESC>/g, BETTER_ESC_CHAR);
      } else {
        this.matchEscapes = false;
      }
      index = 1;
      this.processedPattern = this.processedPattern.replace(/\(\(([\w-]+)(?::(.*?))?\)\)/gm, function(_, name, content) {
        var replacement;
        if (replacement = MessageFormat.WILDCARDS[name]) {
          _this.indices[name] = index;
        } else {
          throw new Error("Unknown wildcard: '" + name + "'");
        }
        index++;
        if (content) {
          content = content.replace('***', replacement);
          return "(" + content + ")";
        } else {
          return "(" + replacement + ")";
        }
      });
      this.regexp = new RegExp(this.processedPattern, 'ig');
    }

    MessageFormat.prototype.scan = function(text) {
      var messages,
        _this = this;
      messages = [];
      if (this.matchEscapes) {
        text = text.replace(ANSI_ESCAPE_RE, BETTER_ESC_CHAR);
      } else {
        text = text.replace(ANSI_ESCAPE_RE, '');
      }
      text = text.replace(this.regexp, function() {
        var index, key, match, message, value, _ref, _ref1;
        match = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        message = _this.createMessage();
        _ref = _this.indices;
        for (key in _ref) {
          index = _ref[key];
          value = match[index] || '';
          if (_this.matchEscapes) {
            value = value.replace(BETTER_ESC_CHAR_RE, '');
          }
          message[key] = value;
        }
        _ref1 = _this.overrides;
        for (key in _ref1) {
          value = _ref1[key];
          message[key] = value.replace('***', message[key] || '');
        }
        messages.push(message);
        return "";
      });
      return {
        text: text,
        messages: messages
      };
    };

    return MessageFormat;

  })();

}).call(this);
