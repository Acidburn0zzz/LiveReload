(function() {
  var MessageParser, MessageParserService, soa, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  soa = require('livereload-soa');

  MessageParser = require('./parser');

  MessageParserService = (function(_super) {
    __extends(MessageParserService, _super);

    function MessageParserService() {
      _ref = MessageParserService.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    MessageParserService.prototype.initialize = function() {};

    MessageParserService.prototype.on_parse = function(command, callback) {
      var messages, parser, unparsed, _ref1;
      parser = new MessageParser(command.manifest);
      _ref1 = parser.parse(command.input), messages = _ref1.messages, unparsed = _ref1.unparsed;
      return callback(null, {
        messages: messages,
        unparsed: unparsed
      });
    };

    MessageParserService.prototype.dispose = function(callback) {
      return callback();
    };

    return MessageParserService;

  })(soa.ServiceImpl);

  module.exports = function(carrier, options) {
    if (options == null) {
      options = {};
    }
    options.name || (options.name = 'msgparser');
    return new MessageParserService(carrier, options);
  };

}).call(this);
