fs     = require 'fs'
Path   = require 'path'
mkdirp = require 'mkdirp'
rimraf = require 'rimraf'
childp = require 'child_process'
which  = require 'which'
zlib   = require 'zlib'
tar    = require 'tar'
events = require 'events'
semver = require 'semver'
U      = require 'underscore'

EXITCODE_INVALID_CMDLINE = 10
EXITCODE_ENV_ERROR = 9
EXITCODE_EXEC_ERROR = 1

events.EventEmitter::once_ = (event, callback) ->
  this.once event, (args...) -> callback(null, args...)

expectedError = (exitCode, message) ->
  error = new Error(message)
  error.exitCode = exitCode
  return error

spawn = (file, args, options, callback) ->
  console.log "$ #{file} #{args.join(' ')}"
  childp.execFile file, args, options, (err, stdout, stderr) ->
    callback(err, { stdout, stderr })

fsExists = (path, callback) ->
  fs.exists path, (result) -> callback(null, result)

fill = (n, string) ->
  if string.length >= n
    string
  else
    string + new Array(n - string.length + 1).join(' ')


class Package
  constructor: (@packager, @dir) ->
    @manifestFile = Path.join(@dir, 'package.json')
    @manifest = null
    @name = 'UNKNOWN'
    @localRepository = null
    @family = null
    @dependencies = []

    @queued = no
    @processed = no
    @destinationDir = null
    @localDependenciesDir = null

  loadManifest: (_) ->
    unless @manifest
      @manifest = JSON.parse(fs.readFile(@manifestFile, 'utf8', _))
      @name = @manifest.name or throw new Error("Missing 'name' key in manifest file #{@manifestFile}")
      @version = @manifest.version or throw new Error("Missing 'version' key in manifest file #{@manifestFile}")
      unless (@version = semver.valid(@version))
        throw new Error("Invalid 'version' key in manifest file #{@manifestFile}")
      @family = @packager.obtainPackageFamily(@name)
      @family.addLocalSource(this)
      @tgzName = "#{@manifest.name}-#{@manifest.version}.tgz"
      @tgzPath = Path.join(@dir, @tgzName)
    return @manifest

  findLocalPackage: (packageName, _) ->
    @localRepository or= @packager.obtainModuleLocalRepository(@dir, _)
    return @localRepository.findPackage(packageName, _)

  addDependency: (requirement) ->
    @dependencies.push(requirement)
    @packager.obtainPackageFamily(requirement.name).addRequirement(requirement)

  setDestinationDir: (dir) ->
    @destinationDir = dir
    @localDependenciesDir = Path.join(dir, 'node_modules')

  setDestinationParentDir: (dir) ->
    @setDestinationDir(Path.join(dir, @name))


class PackageRequirement
  constructor: (@requiringPackage, @name, @versionSpec) ->
    @resolvedPackage = null

    if @versionSpec is 'latest'
      @versionSpec = '*'


class PackageFamily
  constructor: (@packager, @name) ->
    @requirements = []
    @localSources = []
    @resolvedSources = []

  addRequirement: (requirement) ->
    @requirements.push requirement

  addLocalSource: (source) ->
    if @localSources.indexOf(source) < 0
      @localSources.push(source)


class LocalPackageRepository
  constructor: (@packager, @packagesDir) ->

  findPackage: (name, _) ->
    @packager.obtainPackage(Path.join(@packagesDir, name), _)


class CompoundRepository
  constructor: (@repositories) ->

  findPackage: (name, _) ->
    for repository in @repositories
      if pkg = repository.findPackage(name, _)
        return pkg
    return null


class Packager
  constructor: (@options) ->
    @pathsToPackages = {}
    @pathsToRepositories = {}
    @namesToPackageFamilies = {}
    @errors = []

    @selectedFamilies = []


  obtainPackageFamily: (name) ->
    if @namesToPackageFamilies.hasOwnProperty(name)
      @namesToPackageFamilies[name]
    else
      family = new PackageFamily(this, name)
      @selectedFamilies.push(family)
      @namesToPackageFamilies[name] = family


  obtainPackage: (dir, _) ->
    # console.log "obtainPackage(%s)", dir
    if @pathsToPackages.hasOwnProperty(dir)
      @pathsToPackages[dir]
    else
      if fsExists(dir, _)
        pkg = new Package(this, dir)
        pkg.loadManifest(_)
      else
        pkg = null
      @pathsToPackages[dir] = pkg
      return pkg


  obtainFolderRepository: (path, _) ->
    if @pathsToRepositories.hasOwnProperty(path)
      @pathsToRepositories[path]
    else
      @pathsToRepositories[path] = if fsExists(path, _) then new LocalPackageRepository(this, path) else null


  obtainModuleLocalRepository: (moduleFolder, _) ->
    repositories = []
    while true
      repository = @obtainFolderRepository(Path.join(moduleFolder, 'node_modules'), _)
      repositories.push(repository) if repository

      parentFolder = Path.dirname(moduleFolder)
      break if !parentFolder or (moduleFolder == parentFolder)
      moduleFolder = parentFolder

    return new CompoundRepository(repositories)


  addPackage: (pkg, _) ->
    return if pkg.queued
    pkg.queued = yes

    console.log "PARSE: #{Path.dirname(pkg.dir)}: #{pkg.manifest.name}@#{pkg.manifest.version}"

    for own depPackageName, depVersionSpec of pkg.manifest.dependencies || {}
      requirement = new PackageRequirement(pkg, depPackageName, depVersionSpec)
      pkg.addDependency(requirement)
      @resolveDependency(requirement, _)


  resolveDependency: (requirement, _) ->
    # TODO: tolerate missing packages
    pkg = requirement.requiringPackage.findLocalPackage(requirement.name, _)
    if !pkg
      return @addError("Missing pkg '#{requirement.name}' required by pkg '#{requirement.requiringPackage.name}' at #{requirement.requiringPackage.dir}")

    if not semver.satisfies(pkg.version, requirement.versionSpec)
      @addError("Resolved package #{pkg.name}@#{pkg.version} does not satisfy range '#{requirement.versionSpec}' required by pkg '#{requirement.requiringPackage.name}' at #{requirement.requiringPackage.dir}")

    requirement.resolvedPackage = pkg
    @addPackage(pkg, _)


  addError: (message) ->
    @errors.push message
    return undefined


  installPackage: (rootPackage, rootDestinationDir, _) ->
    orderedSources = []

    rootPackage.setDestinationDir(rootDestinationDir)
    orderedSources.push(rootPackage)

    for family in @selectedFamilies
      console.log "#{family.name}"
      for requirement in family.requirements
        console.log "  version #{requirement.versionSpec}"
      for sourcePackage in family.localSources
        console.log "  source version #{sourcePackage.manifest.version} at #{sourcePackage.dir}"
      # console.log "RUN: #{fill 35, name} #{fill 60, pkg.destinationDir} <- #{fill 90, pkg.dir}".trim()

      resolvedSources = []

      # pick source to install
      if family == rootPackage.family
        primarySource = rootPackage
        primarySourceDir = rootDestinationDir
      else
        primarySourceDir = rootPackage.localDependenciesDir

        if family.localSources.length > 0
          for sourcePackage in family.localSources
            rank = 0
            for requirement in family.requirements
              if semver.satisfies(sourcePackage.version, requirement.versionSpec)
                rank += 1
            sourcePackage.rank = rank

          primarySource = U.max(family.localSources, (p) => p.rank)
          primarySource.setDestinationParentDir(primarySourceDir)
          resolvedSources.push(primarySource)
          orderedSources.push(primarySource)

      secondarySources = []
      for requirement in family.requirements
        if not semver.satisfies(primarySource.version, requirement.versionSpec)
          source = requirement.resolvedPackage
          if not semver.eq(primarySource.version, source.version)
            source.destinationDir = null
            source.secondarySourceRequirement = requirement
            resolvedSources.push(source)
            secondarySources.push(source)

      # set destination dirs iteratively, because inner package dirs depend on outer package dirs
      progressMade = yes
      while progressMade
        progressMade = no
        for source in secondarySources when !source.destinationDir
          if dir = source.secondarySourceRequirement.requiringPackage.localDependenciesDir
            source.setDestinationParentDir(dir)
            orderedSources.push(source)
            progressMade = yes

      family.resolvedSources = resolvedSources

      for source in family.resolvedSources
        console.log "  resolved source #{source.manifest?.version} at #{source.dir}"


    console.log "Installation plan:"
    for source in orderedSources
      name = "#{source.manifest.name}@#{source.manifest.version}:"
      console.log "  " + "#{fill 35, name} #{fill 60, source.destinationDir} <- #{fill 90, source.dir}".trim()


    console.log "Installation..."
    for source in orderedSources
      @processPackage(source, _)

    return undefined

  processPackage: (pkg, _) ->
    return if pkg.processed
    pkg.processed = yes

    name = "#{pkg.manifest.name}@#{pkg.manifest.version}:"
    console.log "  " + "#{fill 35, name} #{fill 60, pkg.destinationDir} <- #{fill 90, pkg.dir}".trim()

    if yes
      # rm pkgname-ver.tgz
      try fs.unlink(pkg.tgzPath, _) catch e then null

      # npm pack
      [stdout, stderr] = spawn @options.npm, ['pack'], { cwd: pkg.dir }, _
      unless fs.stat(pkg.tgzPath, _)?.isFile()
        throw expectedError(EXITCODE_EXEC_ERROR, "Failed to npm pack #{pkg.dir}")

      @untar pkg.tgzPath, pkg.destinationDir, _
      try fs.unlink(pkg.tgzPath, _) catch e then null


  untar: (sourceFile, destinationDir, _) ->
    mkdirp(destinationDir, _)

    read    = fs.createReadStream(sourceFile)
    extract = zlib.createGunzip()
    untar   = tar.Extract({ path: destinationDir, strip: 1 })

    read.pipe(extract).pipe(untar).once_ 'end', _

    # spawn @options.tar, ['--strip=1', 'xzf', Path.resolve(sourceFile)], { cwd: destinationDir }, _



run = (options, _) ->
  stat = (try fs.statSync(options.sourceDir) catch e then null)
  unless stat?.isDirectory()
    throw expectedError(EXITCODE_INVALID_CMDLINE, "Source directory does not exist: '#{options.sourceDir}'")

  try rimraf.sync(options.destinationDir) catch e then null

  mkdirp.sync(options.destinationDir)

  options.npm = which('npm', _) or throw expectedError(EXITCODE_ENV_ERROR, "Cannot find npm executable in PATH")
  options.tar = which('tar', _) or throw expectedError(EXITCODE_ENV_ERROR, "Cannot find tar executable in PATH")

  console.log "npm: %s", options.npm
  console.log "tar: %s", options.tar

  packager = new Packager(options )

  pkg = packager.obtainPackage(options.sourceDir, _)
  if !pkg
    throw expectedError(EXITCODE_INVALID_CMDLINE, "Missing source folder #{sourceDir}")
  packager.addPackage(pkg, _)

  packager.installPackage(pkg, options.destinationDir, _)

  if packager.errors.length > 0
    console.error "Errors:"
    for message in packager.errors
      console.error "#{message}"
    throw expectedError(EXITCODE_ENV_ERROR, "failed")

  undefined


options = require('dreamopt') [
  "Usage: _coffee scripts/package-backend.coffee_ <source-package-dir> <destination-dir>"
  "Arguments:"
  "  <source-package-dir>  NPM package directory to bundle #required #var(sourceDir)"
  "  <destination-dir>     Output directory to bundle into #required #var(destinationDir)"
]

console.log "options = %j", options

run options, (err) ->
  if err
    if err.exitCode?
      console.error "** Error: #{err.message}"
      process.exit err.exitCode
    else
      console.error "** #{err.stack}"
      process.exit 1
  else
    console.log "see output dir: open #{options.destinationDir}"
    console.log "ok"
