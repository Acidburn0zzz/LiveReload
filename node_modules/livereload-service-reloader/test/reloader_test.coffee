{ok, deepEqual} = require 'assert'
sinon = require 'sinon'
createService = require '../lib/reloader'
soa = require 'livereload-soa'

delay = (ms, func) -> setTimeout(func, ms)



deepMatch = (expected) ->
  sinon.match (actual) ->
    JSON.stringify(expected) == JSON.stringify(actual)

describe "Reloader service", ->

  beforeEach -> @carrier = new soa.StubCarrier(); sinon.spy(@carrier, 'send')
  beforeEach -> @service = createService(@carrier)
  afterEach (done) -> @service?.dispose(done)

  it "sends 'hello' immediately after creation", ->
    sinon.assert.calledWith(@carrier.send, { command: 'hello', services: ['reloader'] })

  describe "after receiving 'reload' for foo.css", ->
    beforeEach (done) -> @carrier.simulate({ command: 'reload', changes: [{ path: 'foo.css' }] }, done)

    it "does not send any web browser commands immediately", ->
      sinon.assert.neverCalledWith(@carrier.send, sinon.match.has('service', 'server'))

    it "sends server.reload with liveCSS=yes after some delay", (done) ->
      delay 50, =>
        serverSends = @carrier.send.withArgs(sinon.match.has('service', 'server'))
        sinon.assert.calledOnce(serverSends)
        deepEqual serverSends.firstCall.args[0],
          service: 'server'
          command: 'reload'
          messages: [{
            command:      'reload'
            path:         'foo.css'
            originalPath: ''
            liveCSS:      yes
            enableOverride: no
          }]
        done()
