soa = require('livereload-soa')

{RelPathList} = require 'pathspec'


## Exports

module.exports = (carrier, options={}) ->
  options.name or= 'reloader'
  return new ReloaderService(carrier, options)


## Implementation

class ReloaderService extends soa.ServiceImpl

  constructor: (carrier, options) ->
    super(carrier, options)
    @_reloadTimer = null
    @_resetPendingRequest()

    @_liveReloadMasks = RelPathList.parse(["*.css", "*.png", "*.jpg", "*.gif"])

  on_reload: (command, callback) ->
    @_appendRequestToPending(command)
    @_scheduleReloading()
    callback()

  dispose: (callback) ->
    callback()

  _resetPendingRequest: ->
    @_pendingRequest = { changes: [], forceFullReload: no, fullReloadDelay: 0, enableOverride: no }

  _appendRequestToPending: ({ changes, forceFullReload, fullReloadDelay, enableOverride }) ->
    Array_pushAll @_pendingRequest.changes, changes  if changes?
    @_pendingRequest.forceFullReload or= forceFullReload  if forceFullReload?
    @_pendingRequest.enableOverride  or= enableOverride   if enableOverride?
    @_pendingRequest.fullReloadDelay = Math.max(@_pendingRequest.fullReloadDelay, fullReloadDelay)  if fullReloadDelay?

  _scheduleReloading: ->
    delay = (if @_isFullReloadPending() then @_pendingRequest.fullReloadDelay else 0)

    clearTimeout(@_reloadTimer) if @_reloadTimer
    @_reloadTimer = setTimeout(@_performReload.bind(@), delay)

  _performReload: ->
    @_reloadTimer = null

    isFull = @_isFullReloadPending()

    messages =
      for change in @_pendingRequest.changes
        {
          command: 'reload'
          path:         change.path
          localPath:    change.localPath
          originalPath: change.originalPath or ''
          liveCSS:      !@_pendingRequest.forceFullReload
          enableOverride: @_pendingRequest.enableOverride
        }

    @_log 'info', "Send browser reload messages: %j", messages
    @send { service: 'server', command: 'reload', messages: messages }

    @_resetPendingRequest()


  # Live refresh is only available for a pre-defined list of extensions:

  _isFullReloadPending: ->
    @_pendingRequest.forceFullReload or !@_canRefreshChangesLive(@_pendingRequest.changes)

  _canRefreshChangesLive: (changes) ->
    changes.every((change) => @_canRefreshPathLive(change.path))

  _canRefreshPathLive: (path) ->
    @_liveReloadMasks.matches(path)

  _log: (level, text) ->
    @send { service: 'kernel', command: 'log', level: level, text: text }


## Helpers

Array_pushAll = (array, source) ->
  array.push.apply(array, source)
