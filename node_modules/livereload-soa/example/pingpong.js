// Generated by IcedCoffeeScript 1.8.0-d
(function() {
  var PingPongService, soa,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  soa = require('../index');

  PingPongService = (function(_super) {
    __extends(PingPongService, _super);

    function PingPongService() {
      this._tick = __bind(this._tick, this);
      return PingPongService.__super__.constructor.apply(this, arguments);
    }

    PingPongService.prototype.initialize = function() {
      return setInterval(this._tick, 1000);
    };

    PingPongService.prototype.on_ping = function(message, callback) {
      return callback(null, 42);
    };

    PingPongService.prototype._tick = function() {
      return this.send({
        command: 'pong',
        service: 'whatever'
      });
    };

    return PingPongService;

  })(soa.ServiceImpl);

  module.exports = function(carrier) {
    return new PingPongService(carrier, {
      name: 'pingpong'
    });
  };

}).call(this);
