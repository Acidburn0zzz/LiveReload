debug = require('debug')('livereload:cli')
Path  = require 'path'
fs    = require 'fs'
_     = require 'underscore'
R = require('livereload-core').R


_session = null
_vfs = null
_dataFile = null
# _root = null

_stats = {
  connectionCount: 0
  changes:         0
  compilations:    0
  refreshes:       0
}
_customStatus = ''

n = (number, strings...) ->
  variant = (if number is 1 then 0 else 1)
  string = strings[variant]
  return string.replace('#', number)
updateStatus = ->
  status = _customStatus or "Idle. #{n _stats.connectionCount, '1 browser connected', '# browsers connected'}. #{n _stats.changes, '1 change', '# changes'}, #{n _stats.compilations, '1 file compiled', '# files compiled'}, #{n _stats.refreshes, '1 refresh', '# refreshes'} so far."
  UPDATE {
    '#app':
      status: status
  }


UPDATE = (payload, callback) ->
  LR.rpc.send 'rpc', payload, callback


exports.preinit = (universe) ->

exports.init = (vfs, session, appDataDir) ->
  _vfs = vfs
  _session = session
  _dataFile = Path.join(appDataDir, 'projects.json')

  session.on 'run.start', (project, run) =>
    _stats.changes += run.change.paths.length
    updateStatus()

  session.on 'run.finish', (project, run) =>
    LR.client.projects.notifyChanged({})
    _customStatus = ''
    updateStatus()


  statusClearingTimeout = null

  session.on 'action.start', (project, action) =>
    switch action.id
      when 'compile'
        _stats.compilations += 1
        updateStatus()
      when 'refresh'
        _stats.refreshes += 1
        updateStatus()

    clearTimeout(statusClearingTimeout) if statusClearingTimeout?
    _customStatus = action.message + "..."
    updateStatus()

  session.on 'action.finish', (project, action) =>
    clearTimeout(statusClearingTimeout) if statusClearingTimeout?
    statusClearingTimeout = setTimeout ->
      _customStatus = ''
      updateStatus()
    , 50


  if fs.existsSync(_dataFile)
    try
      data = JSON.parse(fs.readFileSync(_dataFile, 'utf8'))
    catch e
      data = null
    if data
      _session.setProjectsMemento _vfs, (data.projects or [])

  updateStatus()


exports.api =
  add: ({ path }, callback) ->
    callback()

  remove: ({ id }, callback) ->
    callback()

  # old one from the Mac version
  # changeDetected: ({ id, changes }, callback) ->

  rpc: (payload, callback) ->
    # _root.receive(payload)
    callback()

  updateModelFromNative: (memento, callback) ->
    _session.setProjectsMemento(_vfs, memento.projects)
    callback(null)

  changeDetected: ({ absolutePaths }, callback) ->
    return callback(null) if !_session
    _session.handleExternalChange(_vfs, '/', absolutePaths)
    callback(null)


exports.setConnectionStatus = ({ connectionCount }) ->
  _stats.connectionCount = connectionCount
  updateStatus()
