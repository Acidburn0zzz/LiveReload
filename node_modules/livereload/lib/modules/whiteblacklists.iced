debug = require('debug')('livereload:whiteblack')
Path = require 'path'
fs   = require 'fs'

{ RelPathList, RelPathSpec } = require 'pathspec'


WHITE_SKEL = """
# add file specs here to monitor them  (use .gitignore syntax; LR restart required):
#
# *.more
# stylesheets/**/*.supercss
""" + "\n"

BLACK_SKEL = """
# add file specs here to exclude them from monitoring  (use .gitignore syntax; overrides included.txt; LR restart required):
#
# *.bad
# logs/
# offending/file.js
""" + "\n"


tryReadTextFileSync = (path) ->
  try
    fs.readFileSync(path, 'utf8')
  catch e
    null

identity = (line) -> line
invertor = (line) -> '!' + line

loadList = (path, mapper, createSkeleton) ->
  if body = tryReadTextFileSync(path)
    lines = body.replace(/\r/g, '').split("\n").map((line) -> line.replace(/(^|\s)#.*$/, '').trim()).filter((line) -> !!line).map(mapper)
    return RelPathList.parse(lines)  # just to check for syntax errors; real parsing later
  else
    if createSkeleton
      try
        fs.writeFileSync path, createSkeleton
    return RelPathList.parse([])

loadLists = (context, fileName, mapper, createSkeleton) ->
  list = loadList(Path.join(context.paths.res, fileName), mapper, null)
  if custom = loadList(Path.join(context.paths.appData, fileName), mapper, createSkeleton)
    list.include custom
  return list


exports.loadMonitoredFilesList = (context) ->
  white = loadLists(context, 'included.txt', identity, WHITE_SKEL)
  black = loadLists(context, 'excluded.txt', invertor, BLACK_SKEL)

  # HACK FIXME TODO: currently there's no way to AND a list, so we just merge them
  # will work incorrectly if the blacklist includes !-entries
  white.include black

  debug "Final list of monitored filespecs: " + white

  return white
