{ deepEqual } = require 'assert'
MessageFormat = require "../#{process.env.JSLIB or 'lib'}/format"

o = (pattern, func) ->
  describe "like #{JSON.stringify pattern}", ->
    fmt = new MessageFormat(pattern)
    OO = (it_, input, expected) ->
      desc = "should find #{JSON.stringify expected} in #{JSON.stringify input}"
      it_ desc, ->
        { messages } = fmt.scan(input)
        deepEqual messages, expected
    oo = OO.bind(this, it)
    oo.only = OO.bind(this, it.only)
    oo.skip = OO.bind(this, it.skip)
    func(oo)


describe "MessageFormat", ->

  o "hello world", (oo) ->
    oo 'hello there', []
    oo 'say "hello world"', [{}]

  o "((message))\n", (oo) ->
    oo "hello there\n", [{message: "hello there"}]
    oo "hello\nthere\n", [{message: "hello"}, {message: "there"}]

  o "error: ((message))\n", (oo) ->
    oo "error: hello world\n", [{message: "hello world"}]

  o "((file)):((line)) ((message))\n", (oo) ->
    oo "foo.c:12 syntax error\n", [{message: "syntax error", file: "foo.c", line: "12"}]

  o { pattern: "TypeError: ((message))\n", message: "Internal compiler error: ***" }, (oo) ->
    oo "TypeError: foo.bar is not an object\n", [{message: "Internal compiler error: foo.bar is not an object"}]

  o { pattern: "<ESC>((message))<ESC> in <ESC>((file))<ESC> on line ((line)), column ((column))" }, (oo) ->
    oo "\x1b[31mSyntaxError: expected ')' got '='\x1b[39m\x1b[31m in \x1b[39m/foo/bar/boz.less\x1b[90m on line 5, column 6:\x1b[39m
\x1b[90m4 \x1b[39m\n5 .b(@v\x1b[7m\x1b[31m\x1b[1m=\x1b[22mnone){\x1b[39m\x1b[27m\n",
      [{message: "SyntaxError: expected ')' got '='", file: '/foo/bar/boz.less', line: 5, column: 6}]
