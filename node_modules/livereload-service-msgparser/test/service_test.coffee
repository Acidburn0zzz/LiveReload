{ok, deepEqual} = require 'assert'
sinon = require 'sinon'
createService = require '../lib/msgparser-service'
soa = require 'livereload-soa'


deepMatch = (expected) ->
  sinon.match (actual) ->
    JSON.stringify(expected) == JSON.stringify(actual)

describe "Message parser service", ->

  beforeEach -> @carrier = new soa.StubCarrier(); sinon.spy(@carrier, 'send')
  beforeEach -> @service = createService(@carrier)
  afterEach (done) -> @service?.dispose(done)

  it "sends 'hello' immediately after creation", ->
    sinon.assert.calledWith(@carrier.send, { command: 'hello', services: ['msgparser'] })

  describe "when given a simple input", ->
    manifest = {
      errors: [
        { pattern: "Error in ((file)):((line)): ((message))\n" }
      ]
    }
    input = """
    Compilation failed.
    Error in foo/bar.less:12: Unexpected ';', expected ':'
    Blah blah blah.
    """

    beforeEach (done) -> @carrier.simulate({ command: 'parse', manifest, input, reply: { foo: 42 } }, done)

    it "returns the correct result", ->
      sinon.assert.calledTwice(@carrier.send)
      deepEqual @carrier.send.lastCall.args[0],
        foo: 42
        result:
          messages: [
            { file: "foo/bar.less", line: "12", message: "Unexpected ';', expected ':'", type: "error" }
          ]
          unparsed: "Compilation failed.\nBlah blah blah."
