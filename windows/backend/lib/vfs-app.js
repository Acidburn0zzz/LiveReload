// Generated by IcedCoffeeScript 1.8.0-d
(function() {
  var AppVFS, LocalVFS,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  LocalVFS = require('vfs-local').LocalVFS;

  AppVFS = (function(_super) {
    __extends(AppVFS, _super);

    function AppVFS(C) {
      this.C = C;
    }

    AppVFS.prototype.findFilesMatchingSuffixInSubtree = function(root, suffix, bestSubtree, callback) {
      return LR.client.project.pathOfBestFileMatchingPathSuffix({
        project: root,
        suffix: suffix
      }, function(err, resp) {
        var match;
        if (err) {
          return callback(err);
        }
        if (resp.err) {
          return callback(new Error(resp.err));
        }
        if (resp.found) {
          match = {
            score: 1,
            path: resp.file
          };
          return callback(null, {
            allMatches: [match],
            bestMatches: [match],
            bestMatch: match
          });
        } else {
          return callback(null, {
            allMatches: [],
            bestMatches: [],
            bestMatch: null
          });
        }
      });
    };

    return AppVFS;

  })(LocalVFS);

  module.exports = AppVFS;

}).call(this);
