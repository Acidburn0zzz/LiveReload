// Generated by IcedCoffeeScript 1.8.0-d
(function() {
  var PathAuthenticator, crypto, random40, random8;

  crypto = require('crypto');

  random8 = function() {
    return Math.random().toString(36).substr(2, 8);
  };

  random40 = function() {
    return random8() + random8() + random8() + random8() + random8();
  };

  PathAuthenticator = (function() {
    function PathAuthenticator() {
      this.salt = random40();
    }

    PathAuthenticator.prototype.sign = function(localPath) {
      return crypto.createHmac('sha1', this.salt).update(localPath).digest('hex');
    };

    PathAuthenticator.prototype.urlPathForServingLocalPath = function(localPath) {
      var signature;
      if (localPath.length === 0 || localPath[0] !== '/') {
        throw new Error("urlPathForServingLocalPath: localPath is expected to start with a slash: '" + localPath + "'");
      }
      signature = this.sign(localPath);
      LR.log.fyi("urlPathForServingLocalPath: localPath = " + localPath);
      return "/_livereload/url-override-v1/" + signature + localPath;
    };

    PathAuthenticator.prototype.localPathForUrlPath = function(urlPath) {
      var localPath, m, signature, _;
      if (m = urlPath.match(/^\/_livereload\/url-override-v1\/([a-z0-9]{40})(\/.*)$/)) {
        _ = m[0], signature = m[1], localPath = m[2];
        localPath = decodeURI(localPath);
        LR.log.fyi("localPathForUrlPath: localPath = " + localPath);
        if (this.sign(localPath) === signature) {
          return [200, localPath];
        } else {
          return [403];
        }
      }
      return [404];
    };

    return PathAuthenticator;

  })();

  module.exports = {
    PathAuthenticator: PathAuthenticator
  };

}).call(this);
