// Generated by IcedCoffeeScript 1.8.0-d
(function() {
  var CSSFileType, CSS_IMPORT_RE, ERR_AUTH_FAILED, ERR_FILE_NOT_FOUND, ERR_NOT_MATCHED, FileType, FileTypeByExtension, ImageFileType, Path, PathAuthenticator, URLOverrideCoordinator, Url, fs, iced, lookupFileType, __iced_k, __iced_k_noop,
    __slice = [].slice;

  iced = {
    Deferrals: (function() {
      function _Class(_arg) {
        this.continuation = _arg;
        this.count = 1;
        this.ret = null;
      }

      _Class.prototype._fulfill = function() {
        if (!--this.count) {
          return this.continuation(this.ret);
        }
      };

      _Class.prototype.defer = function(defer_params) {
        ++this.count;
        return (function(_this) {
          return function() {
            var inner_params, _ref;
            inner_params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            if (defer_params != null) {
              if ((_ref = defer_params.assign_fn) != null) {
                _ref.apply(null, inner_params);
              }
            }
            return _this._fulfill();
          };
        })(this);
      };

      return _Class;

    })(),
    findDeferral: function() {
      return null;
    },
    trampoline: function(_fn) {
      return _fn();
    }
  };
  __iced_k = __iced_k_noop = function() {};

  fs = require('fs');

  Path = require('path');

  Url = require('url');

  PathAuthenticator = require('./pathauth').PathAuthenticator;

  ERR_NOT_MATCHED = 'not-matched';

  ERR_FILE_NOT_FOUND = 'file-not-found';

  ERR_AUTH_FAILED = 'auth-failed';

  FileType = (function() {
    function FileType() {
      this.overridable = false;
      this.mime = "application/octet-stream";
    }

    return FileType;

  })();

  CSSFileType = (function() {
    function CSSFileType() {
      this.overridable = true;
      this.mime = "text/css";
      this.isCSS = true;
    }

    return CSSFileType;

  })();

  ImageFileType = (function() {
    function ImageFileType(mime) {
      this.mime = mime;
      this.overridable = true;
    }

    return ImageFileType;

  })();

  FileTypeByExtension = {
    '.css': new CSSFileType(),
    '.png': new ImageFileType('image/png'),
    '.jpg': new ImageFileType('image/jpg'),
    '.jpeg': new ImageFileType('image/jpg'),
    '.gif': new ImageFileType('image/gif')
  };

  lookupFileType = function(path) {
    var ext, _ref;
    ext = Path.extname(path);
    return (_ref = FileTypeByExtension[ext]) != null ? _ref : new FileType();
  };

  CSS_IMPORT_RE = /(url\s*\(\s*?['"]?)([^)'"]*)(['"]?\s*?\))/g;

  URLOverrideCoordinator = (function() {
    function URLOverrideCoordinator() {
      this.authenticator = new PathAuthenticator();
      this.fs = require('fs');
      this.Path = require('path');
    }

    URLOverrideCoordinator.prototype.shouldOverrideFile = function(path) {
      return lookupFileType(path).overridable;
    };

    URLOverrideCoordinator.prototype.createOverrideURL = function(path) {
      return this.authenticator.urlPathForServingLocalPath(path);
    };

    URLOverrideCoordinator.prototype.handleHttpRequest = function(url, callback) {
      var baseUrl, content, err, errCode, exists, fileType, localPath, ___iced_passed_deferral, __iced_deferrals, __iced_k, _ref;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      _ref = this.authenticator.localPathForUrlPath(url.pathname), errCode = _ref[0], localPath = _ref[1];
      if (errCode === 404) {
        return callback(ERR_NOT_MATCHED);
      }
      if (errCode === 403) {
        return callback(ERR_AUTH_FAILED);
      }
      if (errCode !== 200) {
        return callback(errCode);
      }
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "C:\\dev\\LiveReload\\node_modules\\livereload\\lib\\network\\urloverride.iced",
            funcname: "URLOverrideCoordinator.handleHttpRequest"
          });
          _this.Path.exists(localPath, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return exists = arguments[0];
              };
            })(),
            lineno: 77
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          var _ref1;
          if (!exists) {
            return callback(ERR_FILE_NOT_FOUND);
          }
          baseUrl = (_ref1 = url.query) != null ? _ref1.url : void 0;
          fileType = lookupFileType(localPath);
          (function(__iced_k) {
            if (fileType.isCSS && baseUrl) {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "C:\\dev\\LiveReload\\node_modules\\livereload\\lib\\network\\urloverride.iced",
                  funcname: "URLOverrideCoordinator.handleHttpRequest"
                });
                _this.fs.readFile(localPath, 'utf8', __iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      err = arguments[0];
                      return content = arguments[1];
                    };
                  })(),
                  lineno: 84
                }));
                __iced_deferrals._fulfill();
              })(function() {
                if (err) {
                  return callback(err);
                }
                content = content.replace(CSS_IMPORT_RE, function(match, prefix, importedURL, suffix) {
                  var newURL;
                  newURL = Url.resolve(baseUrl, importedURL);
                  return "" + prefix + newURL + suffix;
                });
                return __iced_k(content = new Buffer(content));
              });
            } else {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "C:\\dev\\LiveReload\\node_modules\\livereload\\lib\\network\\urloverride.iced",
                  funcname: "URLOverrideCoordinator.handleHttpRequest"
                });
                _this.fs.readFile(localPath, 'utf8', __iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      err = arguments[0];
                      return content = arguments[1];
                    };
                  })(),
                  lineno: 94
                }));
                __iced_deferrals._fulfill();
              })(function() {
                if (err) {
                  return callback(err);
                }
                return __iced_k();
              });
            }
          })(function() {
            return callback(null, {
              mime: fileType.mime,
              content: content
            });
          });
        };
      })(this));
    };

    return URLOverrideCoordinator;

  })();

  module.exports = {
    URLOverrideCoordinator: URLOverrideCoordinator,
    ERR_NOT_MATCHED: ERR_NOT_MATCHED,
    ERR_AUTH_FAILED: ERR_AUTH_FAILED,
    ERR_FILE_NOT_FOUND: ERR_FILE_NOT_FOUND
  };

}).call(this);
