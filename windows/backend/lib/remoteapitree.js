// Generated by IcedCoffeeScript 1.8.0-d
(function() {
  var ApiTree, camelize, mkdir,
    __slice = [].slice;

  mkdir = function(tree, path) {
    var item, _i, _len;
    for (_i = 0, _len = path.length; _i < _len; _i++) {
      item = path[_i];
      tree = (tree[item] || (tree[item] = {}));
    }
    return tree;
  };

  camelize = function(string, first) {
    if (first == null) {
      first = true;
    }
    return string.replace(/(^|_)([^_]+)/g, function(match, pre, word, index) {
      var capitalize;
      capitalize = first || (index > 0);
      if (capitalize) {
        return word.substr(0, 1).toUpperCase() + word.substr(1);
      } else {
        return word;
      }
    });
  };

  exports.ApiTree = ApiTree = (function() {
    function ApiTree() {}

    ApiTree.prototype.mount = function(message, value) {
      var name, parent, path, _i, _ref;
      _ref = message.split('.').map(function(component) {
        return camelize(component, false);
      }), path = 2 <= _ref.length ? __slice.call(_ref, 0, _i = _ref.length - 1) : (_i = 0, []), name = _ref[_i++];
      parent = mkdir(this, path);
      return parent[name] = value;
    };

    return ApiTree;

  })();

  exports.createRemoteApiTree = function(messages, func) {
    var message, tree, _i, _len;
    tree = new ApiTree();
    for (_i = 0, _len = messages.length; _i < _len; _i++) {
      message = messages[_i];
      tree.mount(message, func(message));
    }
    return tree;
  };

}).call(this);
