// Generated by IcedCoffeeScript 1.8.0-d
(function() {
  var iced, __iced_k, __iced_k_noop,
    __slice = [].slice;

  iced = {
    Deferrals: (function() {
      function _Class(_arg) {
        this.continuation = _arg;
        this.count = 1;
        this.ret = null;
      }

      _Class.prototype._fulfill = function() {
        if (!--this.count) {
          return this.continuation(this.ret);
        }
      };

      _Class.prototype.defer = function(defer_params) {
        ++this.count;
        return (function(_this) {
          return function() {
            var inner_params, _ref;
            inner_params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            if (defer_params != null) {
              if ((_ref = defer_params.assign_fn) != null) {
                _ref.apply(null, inner_params);
              }
            }
            return _this._fulfill();
          };
        })(this);
      };

      return _Class;

    })(),
    findDeferral: function() {
      return null;
    },
    trampoline: function(_fn) {
      return _fn();
    }
  };
  __iced_k = __iced_k_noop = function() {};

  exports.usage = ['Watch the given directory.', 'Watches the current directory by default, use -d to watch some other directory/directories.', 'Directories:', '  -d, --directory DIR  Operate on the given directory #list #var(dirs)'];

  exports.run = function(options, context) {
    var Server, dir, dirs, server, session, _i, _len;
    if (options.dirs.length === 0) {
      process.stderr.write("At least one directory is required (for now).\n");
      process.exit(2);
    }
    dirs = (function() {
      var _i, _len, _ref, _results;
      _ref = options.dirs;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        dir = _ref[_i];
        _results.push(Path.resolve(dir));
      }
      return _results;
    })();
    session = new Session;
    for (_i = 0, _len = dirs.length; _i < _len; _i++) {
      dir = dirs[_i];
      session.addProject(LocalVFS, dir);
    }
    if (options.watch) {
      Server = require('livereload-server');
      server = new Server();
      server.listen(function() {
        return console.log("LiveReload is listening on port " + server.port + ".");
      });
      server.on('error', function(err, connection) {
        return console.log("Closing connection " + connection.id + " because of error " + err.code + ": " + err.message);
      });
      server.on('command', function(connection, command) {
        return console.log("Received command " + command.command + " on connection " + connection.id + ": " + (JSON.stringify(command)));
      });
      server.on('connected', function(connection) {
        return console.log("Connection " + connection.id + " connected.");
      });
      server.on('disconnected', function(connection) {
        return console.log("Connection " + connection.id + " disconnected.");
      });
      server.on('livereload.js', function(req, res) {
        var data, err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
        __iced_k = __iced_k_noop;
        ___iced_passed_deferral = iced.findDeferral(arguments);
        console.log("Serving livereload.js.");
        (function(_this) {
          return (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "C:\\dev\\LiveReload\\node_modules\\livereload\\lib\\commands\\watch.coffee"
            });
            fs.readFile(Path.join(__dirname, '../res/livereload.js'), 'utf8', __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  err = arguments[0];
                  return data = arguments[1];
                };
              })(),
              lineno: 40
            }));
            __iced_deferrals._fulfill();
          });
        })(this)((function(_this) {
          return function() {
            if (err) {
              throw err;
            }
            res.writeHead(200, {
              'Content-Length': data.length,
              'Content-Type': 'text/javascript'
            });
            return res.end(data);
          };
        })(this));
      });
      session.addInterface(server);
      return session.startMonitoring();
    }
  };

}).call(this);
