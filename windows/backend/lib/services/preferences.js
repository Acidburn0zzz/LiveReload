// Generated by IcedCoffeeScript 1.8.0-d
(function() {
  var LRPreferences, Path, PreferenceCategory, fs,
    __slice = [].slice;

  Path = require('path');

  fs = require('fs');

  PreferenceCategory = (function() {
    function PreferenceCategory(preferences, name) {
      this.preferences = preferences;
      this.name = name;
      this.path = Path.join(this.preferences.path, "" + this.name + ".json");
      this.data = null;
      this.savingTimer = null;
      this.defaults = {};
      this.loadCallbacks = [];
    }

    PreferenceCategory.prototype.doLoad = function() {
      return fs.readFile(this.path, 'utf8', (function(_this) {
        return function(err, raw) {
          var callback, callbacks, e, _i, _len, _ref;
          if (err || !raw) {
            _this.data = {};
          } else {
            try {
              _this.data = JSON.parse(raw);
            } catch (_error) {
              e = _error;
              LR.log.wtf("Failed to parse preference file " + _this.path);
            }
          }
          _ref = [_this.loadCallbacks, null], callbacks = _ref[0], _this.loadCallbacks = _ref[1];
          for (_i = 0, _len = callbacks.length; _i < _len; _i++) {
            callback = callbacks[_i];
            callback();
          }
        };
      })(this));
    };

    PreferenceCategory.prototype.load = function(callback) {
      if (!this.loadCallbacks) {
        return callback();
      }
      this.loadCallbacks.push(callback);
      if (this.loadCallbacks.length === 1) {
        return this.doLoad();
      }
    };

    PreferenceCategory.prototype.saveNow = function() {
      return fs.writeFile(this.path, JSON.stringify(this.data, null, 2), 'utf8', (function(_this) {
        return function(err) {
          if (err) {
            return LR.log.wtf("Failed to save preferences file " + _this.path);
          }
        };
      })(this));
    };

    PreferenceCategory.prototype.save = function() {
      if (!this.savingTimer) {
        return this.savingTimer = setTimeout(((function(_this) {
          return function() {
            _this.savingTimer = null;
            return _this.saveNow();
          };
        })(this)), this.preferences._savingDelay);
      }
    };

    PreferenceCategory.prototype.get = function(subkey, callback) {
      return this.load((function(_this) {
        return function() {
          if (subkey) {
            if (_this.data.hasOwnProperty(subkey)) {
              return callback(_this.data[subkey]);
            } else {
              return callback(_this.defaults[subkey]);
            }
          } else {
            return callback(_this.data);
          }
        };
      })(this));
    };

    PreferenceCategory.prototype.set = function(subkey, value, callback) {
      return this.load((function(_this) {
        return function() {
          if (subkey) {
            if (_this.defaults.hasOwnProperty(subkey) && _this.defaults[subkey] === value) {
              delete _this.data[subkey];
            } else {
              _this.data[subkey] = value;
            }
          } else {
            _this.data = value;
          }
          _this.save();
          return callback();
        };
      })(this));
    };

    PreferenceCategory.prototype.setDefault = function(subkey, value) {
      return this.defaults[subkey] = value;
    };

    return PreferenceCategory;

  })();

  module.exports = LRPreferences = (function() {
    function LRPreferences(path) {
      this.path = path;
      this._categories = {};
      this._savingDelay = 100;
    }

    LRPreferences.prototype.setTestingOptions = function(_arg) {
      this._savingDelay = _arg._savingDelay;
    };

    LRPreferences.prototype.setDefault = function(key, value) {
      var category, subkey, _ref;
      _ref = this._split(key), category = _ref[0], subkey = _ref[1];
      return category.setDefault(subkey, value);
    };

    LRPreferences.prototype.set = function(key, value, callback) {
      var category, subkey, _ref;
      if (callback == null) {
        callback = (function() {});
      }
      _ref = this._split(key), category = _ref[0], subkey = _ref[1];
      return category.set(subkey, value, callback);
    };

    LRPreferences.prototype.get = function(key, callback) {
      var category, subkey, _ref;
      _ref = this._split(key), category = _ref[0], subkey = _ref[1];
      return category.get(subkey, callback);
    };

    LRPreferences.prototype._split = function(key) {
      var category, categoryName, subkey, _base, _ref;
      _ref = key.split('.'), categoryName = _ref[0], subkey = 2 <= _ref.length ? __slice.call(_ref, 1) : [];
      subkey = subkey.join('.');
      category = ((_base = this._categories)[categoryName] || (_base[categoryName] = new PreferenceCategory(this, categoryName)));
      return [category, subkey];
    };

    return LRPreferences;

  })();

}).call(this);
