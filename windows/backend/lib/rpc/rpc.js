// Generated by IcedCoffeeScript 1.8.0-d
(function() {
  var EventEmitter, RPC, iced, __iced_k, __iced_k_noop,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = {
    Deferrals: (function() {
      function _Class(_arg) {
        this.continuation = _arg;
        this.count = 1;
        this.ret = null;
      }

      _Class.prototype._fulfill = function() {
        if (!--this.count) {
          return this.continuation(this.ret);
        }
      };

      _Class.prototype.defer = function(defer_params) {
        ++this.count;
        return (function(_this) {
          return function() {
            var inner_params, _ref;
            inner_params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            if (defer_params != null) {
              if ((_ref = defer_params.assign_fn) != null) {
                _ref.apply(null, inner_params);
              }
            }
            return _this._fulfill();
          };
        })(this);
      };

      return _Class;

    })(),
    findDeferral: function() {
      return null;
    },
    trampoline: function(_fn) {
      return _fn();
    }
  };
  __iced_k = __iced_k_noop = function() {};

  EventEmitter = require('events').EventEmitter;

  module.exports = RPC = (function(_super) {
    __extends(RPC, _super);

    function RPC(transport) {
      this.transport = transport;
      this.callbackTimeout = 2000;
      this.nextCallbackId = 1;
      this.callbacks = {};
      this.timeouts = {};
      this.queue = [];
      this.executing = false;
      this.transport.on('message', (function(_this) {
        return function(message) {
          return _this._enqueueAndScheduleExecution(message);
        };
      })(this));
      this.transport.on('end', (function(_this) {
        return function() {
          return _this.emit('end');
        };
      })(this));
    }

    RPC.prototype.registerCallback = function(callback) {
      var callbackId;
      callbackId = "$" + this.nextCallbackId++;
      this.callbacks[callbackId] = callback;
      return callbackId;
    };

    RPC.prototype.freeCallback = function(callbackId) {
      var timerId;
      delete this.callbacks[callbackId];
      if (timerId = this.timeouts[callbackId]) {
        clearTimeout(timerId);
        return delete this.timeouts[callbackId];
      }
    };

    RPC.prototype.registerOneTimeCallback = function(callback, timeout) {
      var callbackId, wrapperCallback;
      wrapperCallback = (function(_this) {
        return function() {
          var args;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          _this.freeCallback(callbackId);
          return callback.apply(null, [null].concat(__slice.call(args)));
        };
      })(this);
      callbackId = this.registerCallback(wrapperCallback);
      if (timeout) {
        this.timeouts[callbackId] = setTimeout((function() {
          return wrapperCallback(new Error("timeout"));
        }), this.callbackTimeout);
      }
      return callbackId;
    };

    RPC.prototype.send = function(message, arg, callback) {
      var self, timeout;
      if (callback == null) {
        callback = null;
      }
      if (typeof message !== 'string') {
        throw new Error("Invalid type of message: " + message);
      }
      self = this;
      Function.prototype.toJSON = function() {
        return self.registerCallback(this);
      };
      if (callback) {
        timeout = null;
        this.transport.send([message, arg, this.registerOneTimeCallback(callback, timeout)]);
      } else {
        this.transport.send([message, arg]);
      }
      return delete Function.prototype.toJSON;
    };

    RPC.prototype._enqueueAndScheduleExecution = function(message) {
      this.queue.push(message);
      return this._executeNextPending();
    };

    RPC.prototype._executeNextPending = function() {
      var message;
      if (this.executing) {
        return;
      }
      if (message = this.queue.shift()) {
        return this.executeWithProtection(message);
      } else {
        return process.nextTick((function(_this) {
          return function() {
            if ((_this.queue.length === 0) && !_this.executing) {
              return _this.emit('idle');
            }
          };
        })(this));
      }
    };

    RPC.prototype.executeWithProtection = function(message) {
      var e, err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      try {
        this.executing = true;
        (function(_this) {
          return (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "C:\\dev\\LiveReload\\node_modules\\livereload\\lib\\rpc\\rpc.iced",
              funcname: "RPC.executeWithProtection"
            });
            _this.execute(message, __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return err = arguments[0];
                };
              })(),
              lineno: 80
            }));
            __iced_deferrals._fulfill();
          });
        })(this)((function(_this) {
          return function() {
            _this.executing = false;
            if (err) {
              _this.handleException(err);
            }
            return process.nextTick(_this._executeNextPending.bind(_this));
          };
        })(this));
      } catch (_error) {
        e = _error;
        return this.handleException(e);
      }
    };

    RPC.prototype.handleException = function(err) {
      return this.emit('error', err);
    };

    RPC.prototype.execute = function(_arg, callback) {
      var arg, command;
      command = _arg[0], arg = _arg[1];
      if (command && typeof command === 'string') {
        if (command[0] === '$') {
          return this.executeCallback(command, arg, callback);
        } else if (command[0] === '-') {
          return this.freeCallback(command.substr(1));
        } else {
          return this.executeCommand(command, arg, callback);
        }
      } else {
        return callback(new Error("Invalid JSON received"));
      }
    };

    RPC.prototype.executeCallback = function(command, arg, callback) {
      var func;
      if (func = this.callbacks[command]) {
        func(arg);
        return callback(null);
      } else {
        return callback(new Error("Unknown or duplicate callback received"));
      }
    };

    RPC.prototype.executeCommand = function(command, arg, callback) {
      var err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "C:\\dev\\LiveReload\\node_modules\\livereload\\lib\\rpc\\rpc.iced",
            funcname: "RPC.executeCommand"
          });
          _this.emit('command', command, arg, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return err = arguments[0];
              };
            })(),
            lineno: 115
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          return callback(err);
        };
      })(this));
    };

    return RPC;

  })(EventEmitter);

}).call(this);
