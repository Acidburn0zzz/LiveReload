// Generated by IcedCoffeeScript 1.8.0-d
(function() {
  var EventEmitter, Expectation, MockTransport, SCORE_CMD_MATCH, SCORE_EXACT, SCORE_NO_MATCH, SCORE_WILDCARD, debug, deepEqual, equal, ok, stableOrderReplacer, _, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  debug = require('debug')('livereload:rpc');

  _ref = require('assert'), ok = _ref.ok, equal = _ref.equal, deepEqual = _ref.deepEqual;

  EventEmitter = require('events').EventEmitter;

  _ = require('underscore');

  SCORE_NO_MATCH = 0;

  SCORE_CMD_MATCH = 10;

  SCORE_WILDCARD = 900;

  SCORE_EXACT = 1000;

  stableOrderReplacer = function(key, value) {
    if ((value != null ? value.constructor : void 0) !== Object) {
      return value;
    }
    return Object.keys(value).sort().reduce(function(sorted, key) {
      sorted[key] = value[key];
      return sorted;
    }, {});
  };

  Expectation = (function() {
    function Expectation(ordinal, callback, command, arg) {
      this.ordinal = ordinal;
      this.callback = callback;
      this.command = command;
      this.arg = arg;
      this.argString = JSON.stringify(this.arg, stableOrderReplacer);
    }

    Expectation.prototype.toString = function() {
      return "Expectation(" + (JSON.stringify(this.command)) + ", " + this.argString + ")";
    };

    Expectation.prototype.score = function(command, arg) {
      if (this.command !== command) {
        return SCORE_NO_MATCH;
      } else if (this.arg === '*') {
        return SCORE_WILDCARD;
      } else if (JSON.stringify(arg, stableOrderReplacer) !== this.argString) {
        return SCORE_CMD_MATCH;
      } else {
        return SCORE_EXACT;
      }
    };

    return Expectation;

  })();

  module.exports = MockTransport = (function(_super) {
    __extends(MockTransport, _super);

    function MockTransport(options) {
      var _ref1;
      if (options == null) {
        options = {};
      }
      this.strict = (_ref1 = options.strict) != null ? _ref1 : false;
      this.messages = [];
      this.expectations = [];
      this.nextOrdinal = 1;
      this.lastCallback = null;
      this.timer = null;
      this.i = this.i.bind(this);
      this.o = this.o.bind(this);
      this.timeout = this.timeout.bind(this);
      this.reply = this.reply.bind(this);
      this.transport = this;
    }

    MockTransport.prototype.send = function(message) {
      var best, expectation, score, _i, _len, _ref1;
      this.messages.push(message);
      this.emit('sent', message);
      if (message[2]) {
        this.lastCallback = message[2];
      }
      best = {
        expectation: null,
        score: 0
      };
      _ref1 = this.expectations;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        expectation = _ref1[_i];
        score = expectation.score(message[0], message[1]);
        if (score > best.score) {
          best = {
            expectation: expectation,
            score: score
          };
        }
      }
      if (best.score >= SCORE_WILDCARD) {
        if (best.score === SCORE_EXACT) {
          debug("Exact expectation match for %j", message);
        } else {
          debug("Wildcard expectation match for %j, arg wildcard %j", message, best.expectation.arg);
        }
        return this._matched(best.expectation);
      } else {
        if (best.score < SCORE_CMD_MATCH) {
          debug("No match for %j", message);
        } else {
          debug("No match for the arg of %j", message);
          debug("Diff:\n%s", require('json-diff').diffString(best.expectation.arg, message[1]));
        }
        if (this.strict) {
          debug("All expectations:\n" + this.expectations.join("\n"));
          if (best.score >= SCORE_CMD_MATCH) {
            return deepEqual(message[1], best.expectation.arg);
          } else {
            return ok(false, "Unexpected message received: " + (JSON.stringify(message)));
          }
        }
      }
    };

    MockTransport.prototype.simulate = function(message) {
      return this.emit('message', message);
    };

    MockTransport.prototype.expect = function(command, arg, callback) {
      if (typeof callback !== 'function') {
        throw new Error("MockTransport#expect 3rd argument (callback) must be a function");
      }
      this.expectations.push(new Expectation(this.nextOrdinal++, callback, command, arg));
      return this.timeout();
    };

    MockTransport.prototype._matched = function(expectation) {
      this.expectations = _.without(this.expectations, expectation);
      return expectation.callback();
    };

    MockTransport.prototype.o = function(command, arg, callback) {
      return this.expect(command, arg, callback);
    };

    MockTransport.prototype.i = function(command, arg) {
      return process.nextTick((function(_this) {
        return function() {
          return _this.simulate([command, arg]);
        };
      })(this));
    };

    MockTransport.prototype.reply = function(arg) {
      if (!this.lastCallback) {
        throw new Error("MockTransport#reply: no callback available");
      }
      this.i(this.lastCallback, arg);
      return this.lastCallback = null;
    };

    MockTransport.prototype.timeout = function(period) {
      var limit;
      if (period == null) {
        period = 100;
      }
      if (this.timer) {
        clearTimeout(this.timer);
      }
      limit = this.nextOrdinal;
      return this.timer = setTimeout(((function(_this) {
        return function() {
          var expectation, unmatched;
          _this.timer = null;
          unmatched = _this.expectations.filter(function(e) {
            return e.ordinal < limit;
          });
          if (unmatched.length > 0) {
            return ok(false, ("Expected commands not received within " + period + "ms:") + ((function() {
              var _i, _len, _results;
              _results = [];
              for (_i = 0, _len = unmatched.length; _i < _len; _i++) {
                expectation = unmatched[_i];
                _results.push("\n" + expectation);
              }
              return _results;
            })()).join(''));
          }
        };
      })(this)), period);
    };

    return MockTransport;

  })(EventEmitter);

}).call(this);
