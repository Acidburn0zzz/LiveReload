// Generated by IcedCoffeeScript 1.8.0-d
(function() {
  var EventEmitter, JSONStreamTransport, debug,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  debug = require('debug')('livereload:rpc');

  EventEmitter = require('events').EventEmitter;

  module.exports = JSONStreamTransport = (function(_super) {
    __extends(JSONStreamTransport, _super);

    function JSONStreamTransport(input, output) {
      this.input = input;
      this.output = output;
      this.input.resume();
      this.input.setEncoding('utf8');
      this.buffer = "";
      this.input.on('data', (function(_this) {
        return function(chunk) {
          var line, lines, _i, _j, _len, _ref, _results;
          _ref = (_this.buffer + chunk).split("\n"), lines = 2 <= _ref.length ? __slice.call(_ref, 0, _i = _ref.length - 1) : (_i = 0, []), _this.buffer = _ref[_i++];
          _results = [];
          for (_j = 0, _len = lines.length; _j < _len; _j++) {
            line = lines[_j];
            _results.push(_this._processLine(line));
          }
          return _results;
        };
      })(this));
      this.input.on('end', (function(_this) {
        return function() {
          debug("KTNXBYE");
          return _this.emit('end');
        };
      })(this));
    }

    JSONStreamTransport.prototype._processLine = function(line) {
      var command;
      if (line === '') {
        return;
      }
      if (!line.match(/"app\.ping"/)) {
        debug("App to Node: %s", line);
      }
      command = JSON.parse(line);
      return this.emit('message', command);
    };

    JSONStreamTransport.prototype.send = function(command) {
      var buf, payload;
      if (typeof command[0] !== 'string') {
        throw new Error("Invalid type of message: " + command);
      }
      payload = JSON.stringify(command);
      buf = new Buffer("" + payload + "\n");
      debug("Node to App: %s", payload);
      return this.output.write("" + payload + "\n");
    };

    return JSONStreamTransport;

  })(EventEmitter);

}).call(this);
