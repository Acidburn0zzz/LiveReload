// Generated by IcedCoffeeScript 1.8.0-d
(function() {
  var EventEmitter, LocalVFS, Monitor, Path, debug, fs,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  debug = require('debug')('vfs:local');

  fs = require('fs');

  Path = require('path');

  EventEmitter = require('events').EventEmitter;

  Monitor = (function(_super) {
    __extends(Monitor, _super);

    function Monitor(path) {
      this.path = path;
    }

    Monitor.prototype.close = function() {};

    return Monitor;

  })(EventEmitter);

  LocalVFS = (function() {
    function LocalVFS() {}

    LocalVFS.prototype.writeFile = function(path, data, callback) {
      return fs.writeFile(path, data, callback);
    };

    LocalVFS.prototype.readFile = function(path, encoding, callback) {
      return fs.readFile(path, encoding, callback);
    };

    LocalVFS.prototype.watch = function(path) {
      return new Monitor(path);
    };

    LocalVFS.prototype.isSubpath = function(superpath, subpath) {
      if (subpath[subpath.length - 1] !== '/') {
        subpath = "" + subpath + "/";
      }
      return (subpath.length >= superpath.length) && (subpath.substr(0, superpath.length) === superpath);
    };

    LocalVFS.prototype.findFilesMatchingSuffixInSubtree = function(root, suffix, bestSubtree, callback) {
      return process.nextTick(function() {
        return callback(null, {
          allMatches: [],
          bestMatches: [],
          bestMatch: null
        });
      });
    };

    return LocalVFS;

  })();

  module.exports = new LocalVFS();

  module.exports.LocalVFS = LocalVFS;

}).call(this);
