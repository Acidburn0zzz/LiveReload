// Generated by IcedCoffeeScript 1.3.3f
(function() {
  var RBlock, debug,
    __hasProp = {}.hasOwnProperty;

  debug = require('debug')('reactive');

  RBlock = (function() {

    function RBlock(ownerModel, name, func) {
      var universe;
      this.ownerModel = ownerModel;
      this.func = func;
      universe = this.ownerModel.universe;
      this._id = this.ownerModel._id + "_" + universe.uniqueId("B", name || func.name);
      this.ownerModel._blocks.push(this);
      this._dependencies = {};
      universe._internal_scheduleBlock(this);
    }

    RBlock.prototype.toString = function() {
      return this._id;
    };

    RBlock.prototype.dispose = function() {
      var dummy, model, _ref, _results;
      _ref = this._dependencies;
      _results = [];
      for (dummy in _ref) {
        if (!__hasProp.call(_ref, dummy)) continue;
        model = _ref[dummy];
        _results.push(model.unsubscribe(this));
      }
      return _results;
    };

    RBlock.prototype.execute = function() {
      var dummy, model, prevCollector, rv, universe, _ref;
      debug("Executing block " + this);
      _ref = this._dependencies;
      for (dummy in _ref) {
        if (!__hasProp.call(_ref, dummy)) continue;
        model = _ref[dummy];
        model.unsubscribe(this);
      }
      universe = this.ownerModel.universe;
      prevCollector = universe.currentCollector;
      universe.currentCollector = this;
      try {
        rv = this.func();
      } finally {
        universe.currentCollector = prevCollector;
      }
      return rv;
    };

    RBlock.prototype.dependency = function(model, attribute) {
      debug("" + this + " depends on " + model + "." + attribute);
      model.subscribe(this, attribute);
      return this._dependencies[model._id] = model;
    };

    return RBlock;

  })();

  module.exports = RBlock;

}).call(this);
