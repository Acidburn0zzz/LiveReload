// Generated by IcedCoffeeScript 1.8.0-d
(function() {
  var deepEqual, equal, ok, strictEqual, throws, types, _ref;

  _ref = require('assert'), ok = _ref.ok, equal = _ref.equal, deepEqual = _ref.deepEqual, strictEqual = _ref.strictEqual, throws = _ref.throws;

  types = require("../" + (process.env.JSLIB || 'lib') + "/types");

  describe('types', function() {
    describe('.resolve', function() {
      it("should resolve String into a string type", function() {
        return equal(types.resolve(String).toString(), 'string');
      });
      it("should resolve 'int' into an integer type", function() {
        return equal(types.resolve('int').toString(), 'int');
      });
      it("should resolve Array into array(any)", function() {
        return equal(types.resolve(Array).toString(), "{ array: any }");
      });
      it("should resolve { array: 'int' } into array(int)", function() {
        return equal(types.resolve({
          array: 'int'
        }).toString(), "{ array: int }");
      });
      return it("should resolve { object: Foo } into object(Foo)", function() {
        var Foo;
        Foo = (function() {
          function Foo() {}

          return Foo;

        })();
        return equal(types.resolve({
          object: Foo
        }).toString(), "{ object: Foo }");
      });
    });
    describe('array(int).coerce', function() {
      return it("should turn [1, '2'] into [1, 2]", function() {
        return equal(JSON.stringify(types.coerce([1, '2'], {
          array: 'int'
        })), JSON.stringify([1, 2]));
      });
    });
    return describe('object(Foo)', function() {
      it("should complain about mismatched object types when given an instance of unrelated class", function() {
        var Bar, Foo;
        Foo = (function() {
          function Foo() {}

          return Foo;

        })();
        Bar = (function() {
          function Bar() {}

          return Bar;

        })();
        return throws((function() {
          return types.coerce(new Bar(), Foo);
        }), /Invalid Bar value/);
      });
      return it("should complain about null", function() {
        var Foo;
        Foo = (function() {
          function Foo() {}

          return Foo;

        })();
        return throws((function() {
          return types.coerce(null, Foo);
        }), /Invalid null value/);
      });
    });
  });

}).call(this);
