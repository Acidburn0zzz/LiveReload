// Generated by IcedCoffeeScript 1.8.0-d
(function() {
  var Advise, BaseEntity, DerivedEntity, EmptyEntity, IncludingEntity, Jerry_MutualRef, LRRuby_Basics, LRRuby_Version, LittleQuacker, MyApp_DoubleEventCount, MyApp_EventCount, MyApp_EventCount_WithDefault, MyApp_OtherMethods, MyApp_PathCollection, MyApp_RubyCollection1, MyApp_SomeMethods, MyApp_Status1, MyApp_Status2, MyApp_SuperStatus, MyApp_SystemRubies, R, SimpleEntity_WithAutomaticalBlock, Tom_InSouthboundDuckling, Tom_MutualRef, catchAndReturnError, deepEqual, equal, helpers, iced, ok, throws, _, __iced_k, __iced_k_noop, _ref,
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  iced = {
    Deferrals: (function() {
      function _Class(_arg) {
        this.continuation = _arg;
        this.count = 1;
        this.ret = null;
      }

      _Class.prototype._fulfill = function() {
        if (!--this.count) {
          return this.continuation(this.ret);
        }
      };

      _Class.prototype.defer = function(defer_params) {
        ++this.count;
        return (function(_this) {
          return function() {
            var inner_params, _ref;
            inner_params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            if (defer_params != null) {
              if ((_ref = defer_params.assign_fn) != null) {
                _ref.apply(null, inner_params);
              }
            }
            return _this._fulfill();
          };
        })(this);
      };

      return _Class;

    })(),
    findDeferral: function() {
      return null;
    },
    trampoline: function(_fn) {
      return _fn();
    }
  };
  __iced_k = __iced_k_noop = function() {};

  _ref = require('assert'), ok = _ref.ok, equal = _ref.equal, deepEqual = _ref.deepEqual;

  _ = require('underscore');

  R = require("../" + (process.env.JSLIB || 'lib') + "/reactive");

  throws = function(smt, func) {
    return require('assert').throws(func, smt);
  };

  Object.defineProperty(R.Universe.prototype, 'kindNames', {
    get: function() {
      return _.pluck(this.kinds, 'kind').sort();
    }
  });

  catchAndReturnError = function(func) {
    var err;
    try {
      func();
      return null;
    } catch (_error) {
      err = _error;
      return err;
    }
  };

  Advise = {
    before: function(object, key, decorator) {
      var original;
      original = object[key];
      return object[key] = function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        decorator.call.apply(decorator, [object].concat(__slice.call(args)));
        return original.call.apply(original, [object].concat(__slice.call(args)));
      };
    }
  };

  helpers = {
    usesUniverse: function() {
      beforeEach(function() {
        return this.universe = new R.Universe();
      });
      afterEach(function() {
        this.universe.dispose();
        return delete this.universe;
      });
      return this;
    },
    usesRootEntity: function() {
      beforeEach(function() {
        this.universe.define(EmptyEntity);
        this.root = this.universe.create('EmptyEntity');
        return this.performAndWait = (function(_this) {
          return function(done, name, func) {
            return _this.universe.performAndWait(func, done);
          };
        })(this);
      });
      return this;
    },
    defines: function() {
      var entityClasses;
      entityClasses = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      beforeEach(function() {
        return this.universe.define(entityClasses);
      });
      return this;
    },
    creates: function(fieldName, kind, attributes) {
      if (attributes == null) {
        attributes = {};
      }
      beforeEach(function() {
        return this[fieldName] = this.universe.create(kind, attributes);
      });
      return this;
    },
    performAndWait: function(name, func) {
      return beforeEach(function(done) {
        return this.performAndWait(done, name, func.bind(this));
      });
    },
    createsInJob: function(fieldName, kind, attributes) {
      if (attributes == null) {
        attributes = {};
      }
      helpers.performAndWait("initialize", function() {
        return this[fieldName] = this.universe.create(kind, attributes);
      });
      return this;
    },
    usesLog: function() {
      beforeEach(function() {
        this.log = [];
        this.log.equal = (function(_this) {
          return function(expected) {
            equal(JSON.stringify(_this.log, null, 2), JSON.stringify(expected, null, 2));
            return _this.log.splice(0, _this.log.length);
          };
        })(this);
        this.log.pusher = (function(_this) {
          return function(line) {
            return function() {
              _this.log.push(line);
              return void 0;
            };
          };
        })(this);
        this.log.wrap = (function(_this) {
          return function(line, func) {
            var log;
            log = _this.log;
            return function() {
              var args;
              args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
              log.push(line);
              return func.apply(this, args);
            };
          };
        })(this);
        return this.log.inspectTaskEvents = function(task, events) {
          if (__indexOf.call(events, 'finalized') >= 0) {
            task.on('finalized', this.pusher("" + task + ".finalized"));
          }
          if (__indexOf.call(events, 'completed') >= 0) {
            task.on('completed', this.pusher("" + task + ".completed"));
          }
          return this;
        };
      });
      afterEach(function() {
        return delete this.log;
      });
      return this;
    },
    inspectReads: function() {
      beforeEach(function() {
        return Advise.before(this.universe, 'reading', (function(_this) {
          return function(entity, topic) {
            if (_this.log) {
              return _this.log.push("reading " + entity._r_id + " " + topic);
            }
          };
        })(this));
      });
      return this;
    },
    inspectBroadcasts: function() {
      beforeEach(function() {
        return Advise.before(this.universe, 'broadcast', (function(_this) {
          return function(entity, topic) {
            if (_this.log) {
              return _this.log.push("change " + entity._r_id + " " + topic);
            }
          };
        })(this));
      });
      return this;
    },
    inspectSubscriptions: function() {
      beforeEach(function() {
        return Advise.before(this.universe, 'subscribe', (function(_this) {
          return function(dependent, entity, topicSet) {
            var topics;
            if (_this.log) {
              topics = (topicSet ? Object.keys(topicSet).join(',') : 'null');
              return _this.log.push("sub " + dependent._r_id + " " + entity._r_id + " " + topics);
            }
          };
        })(this));
      });
      return this;
    }
  };

  EmptyEntity = (function() {
    function EmptyEntity() {}

    return EmptyEntity;

  })();

  SimpleEntity_WithAutomaticalBlock = (function() {
    function SimpleEntity_WithAutomaticalBlock() {}

    SimpleEntity_WithAutomaticalBlock.prototype.schema = {
      someValue: {
        type: 'int'
      }
    };

    SimpleEntity_WithAutomaticalBlock.prototype.automatically_collect_something = function() {
      return (this.list || (this.list = [])).push(this.someValue);
    };

    return SimpleEntity_WithAutomaticalBlock;

  })();

  BaseEntity = (function() {
    function BaseEntity() {}

    BaseEntity.prototype.schema = {
      someValue: {
        type: 'int',
        "default": 42
      }
    };

    BaseEntity.prototype.initialize = function() {
      return this.baseInitialized = true;
    };

    BaseEntity.prototype.boringMethod = function() {
      return 24;
    };

    BaseEntity.prototype.automatically_copy_someValue = function() {
      return this.someValueCopy = this.someValue;
    };

    return BaseEntity;

  })();

  DerivedEntity = (function() {
    function DerivedEntity() {}

    DerivedEntity.prototype.schema = {
      $extends: 'BaseEntity',
      anotherValue: {
        type: 'int',
        "default": 33
      }
    };

    DerivedEntity.prototype.initialize = function() {
      return this.derivedInitialized = true;
    };

    DerivedEntity.prototype.veryBoringMethod = function() {
      return 12;
    };

    DerivedEntity.prototype.automatically_copy_anotherValue = function() {
      return this.anotherValueCopy = this.anotherValue;
    };

    return DerivedEntity;

  })();

  IncludingEntity = (function() {
    function IncludingEntity() {}

    IncludingEntity.prototype.schema = {
      $includes: BaseEntity
    };

    return IncludingEntity;

  })();

  MyApp_SomeMethods = (function() {
    function MyApp_SomeMethods() {}

    MyApp_SomeMethods.prototype.something = function(x) {
      return x + 1;
    };

    return MyApp_SomeMethods;

  })();

  MyApp_OtherMethods = (function() {
    function MyApp_OtherMethods() {}

    MyApp_OtherMethods.prototype.another = function(x) {
      return x * 2;
    };

    return MyApp_OtherMethods;

  })();

  MyApp_EventCount = (function() {
    function MyApp_EventCount() {}

    MyApp_EventCount.prototype.schema = {
      eventCount: {
        type: 'int'
      }
    };

    return MyApp_EventCount;

  })();

  MyApp_EventCount_WithDefault = (function() {
    function MyApp_EventCount_WithDefault() {}

    MyApp_EventCount_WithDefault.prototype.schema = {
      eventCount: {
        type: 'int',
        "default": 42
      }
    };

    return MyApp_EventCount_WithDefault;

  })();

  MyApp_DoubleEventCount = (function() {
    function MyApp_DoubleEventCount() {}

    MyApp_DoubleEventCount.prototype.schema = {
      doubleEventCount: {
        type: 'int'
      }
    };

    MyApp_DoubleEventCount.prototype.compute_doubleEventCount = function() {
      return this.eventCount * 2;
    };

    return MyApp_DoubleEventCount;

  })();

  MyApp_Status1 = (function() {
    function MyApp_Status1() {}

    MyApp_Status1.prototype.schema = {
      status: {
        type: 'string'
      }
    };

    MyApp_Status1.prototype.compute_status = function() {
      return "eventCount is " + this.eventCount;
    };

    return MyApp_Status1;

  })();

  MyApp_Status2 = (function() {
    function MyApp_Status2() {}

    MyApp_Status2.prototype.schema = {
      status: {
        type: 'string'
      }
    };

    MyApp_Status2.prototype.compute_status = function() {
      return "doubleEventCount ends with " + (this.doubleEventCount % 10);
    };

    return MyApp_Status2;

  })();

  MyApp_SuperStatus = (function() {
    function MyApp_SuperStatus() {}

    MyApp_SuperStatus.prototype.schema = {
      superStatus: {
        type: 'string'
      }
    };

    MyApp_SuperStatus.prototype.compute_superStatus = function() {
      return "(" + this.status + ")";
    };

    return MyApp_SuperStatus;

  })();

  MyApp_PathCollection = (function() {
    function MyApp_PathCollection() {}

    MyApp_PathCollection.prototype.schema = {
      pluginPaths: {
        collection: 'list',
        type: 'string'
      }
    };

    return MyApp_PathCollection;

  })();

  MyApp_RubyCollection1 = (function() {
    function MyApp_RubyCollection1() {}

    MyApp_RubyCollection1.prototype.schema = {
      rubies: {
        collection: 'list',
        type: 'LRRuby'
      }
    };

    return MyApp_RubyCollection1;

  })();

  LRRuby_Basics = (function() {
    function LRRuby_Basics() {}

    LRRuby_Basics.prototype.schema = {
      path: {
        type: String
      }
    };

    return LRRuby_Basics;

  })();

  LRRuby_Version = (function() {
    function LRRuby_Version() {}

    LRRuby_Version.prototype.schema = {
      version: {
        type: String
      }
    };

    LRRuby_Version.prototype.compute_version = function(callback) {
      return setTimeout((function(_this) {
        return function() {
          if (_this.path === '/usr/bin/ruby') {
            return callback(null, "1.8.7");
          } else {
            return callback(null, "1.9.3");
          }
        };
      })(this), 5);
    };

    return LRRuby_Version;

  })();

  MyApp_SystemRubies = (function() {
    function MyApp_SystemRubies() {}

    MyApp_SystemRubies.prototype.schema = {
      systemRubies: {
        collection: 'list',
        type: 'LRRuby'
      }
    };

    MyApp_SystemRubies.prototype.compute_systemRubies = function(callback) {
      return process.nextTick(function() {
        return callback(null, [
          {
            path: '/usr/bin/ruby'
          }, {
            path: '/usr/local/bin/ruby'
          }, {
            path: '~/.rvm/rubies/rvm-ruby-1.9.2/bin/ruby'
          }
        ]);
      });
    };

    return MyApp_SystemRubies;

  })();

  LittleQuacker = {
    name: 'LittleQuacker',
    duck: {
      quacks: true,
      swims: false
    }
  };

  Tom_InSouthboundDuckling = (function() {
    function Tom_InSouthboundDuckling() {}

    Tom_InSouthboundDuckling.prototype.schema = {
      southernFriedDuck: {
        type: 'LittleQuacker?'
      }
    };

    Tom_InSouthboundDuckling.prototype.hunger = function() {
      var _ref1;
      return 100 - (((_ref1 = this.southernFriedDuck) != null ? _ref1.calories : void 0) || 0);
    };

    return Tom_InSouthboundDuckling;

  })();

  Jerry_MutualRef = (function() {
    function Jerry_MutualRef() {}

    Jerry_MutualRef.prototype.schema = {
      enemy: {
        type: 'Tom?'
      }
    };

    return Jerry_MutualRef;

  })();

  Tom_MutualRef = (function() {
    function Tom_MutualRef() {}

    Tom_MutualRef.prototype.schema = {
      enemy: {
        type: 'Jerry?'
      }
    };

    return Tom_MutualRef;

  })();

  describe('R', function() {
    return it("exports VERSION", function() {
      return ok(R.VERSION.match(/^\d+\.\d+\.\d+$/));
    });
  });

  describe('R.Universe', function() {
    helpers.usesUniverse();
    describe(".uniqueId(className, [detail]) return value", function() {
      it("is a string", function() {
        return equal(typeof (this.universe.uniqueId('Foo')), 'string');
      });
      it("is composed of the prefix followed by some digits", function() {
        return ok(this.universe.uniqueId('Foo').match(/^Foo\d+$/));
      });
      it("is different on each call", function() {
        return ok(this.universe.uniqueId('Foo') !== this.universe.uniqueId('Foo'));
      });
      return describe("(when the <detail> argument is specified)", function() {
        return it("has an alphanumeric representation of <detail> appended to the id", function() {
          var id;
          id = this.universe.uniqueId('Foo', 'Bar Boz');
          return ok(id.match(/^Foo\d+_Bar_Boz$/), "id '" + id + "' does not match");
        });
      });
    });
    describe('#define(klass)', function() {
      describe("given a regular class", function() {
        helpers.defines(EmptyEntity);
        it("defines a kind matching the given class name", function() {
          return deepEqual(this.universe.kindNames, ['EmptyEntity']);
        });
        return it("adds the given class to the list of the kind's mixins", function() {
          return deepEqual(this.universe.kinds.EmptyEntity.klasses, [EmptyEntity]);
        });
      });
      describe("given a class with a two-part name like Foo_Bar", function() {
        beforeEach(function() {
          return this.universe.define(MyApp_SomeMethods);
        });
        return it("uses only the first part as the entity kind", function() {
          return deepEqual(this.universe.kindNames, ['MyApp']);
        });
      });
      return describe("given multiple classes for the same entity", function() {
        beforeEach(function() {
          return this.universe.define(MyApp_SomeMethods);
        });
        beforeEach(function() {
          return this.universe.define(MyApp_OtherMethods);
        });
        return it("merges them into a single entity kind", function() {
          return deepEqual(this.universe.kindNames, ['MyApp']);
        });
      });
    });
    return describe('#create(kind, [attributes])', function() {
      describe("given a valid kind", function() {
        helpers.defines(MyApp_SomeMethods).creates('entity', 'MyApp');
        return it("returns a new entity of that kind", function() {
          ok(this.entity.isReactiveEntity);
          return equal(this.entity.kind, 'MyApp');
        });
      });
      return describe("given an unknown kind", function() {
        beforeEach(function() {
          return this.err = catchAndReturnError((function(_this) {
            return function() {
              return _this.universe.create('NonExistent');
            };
          })(this));
        });
        return it("throws an error", function() {
          return equal(this.err.message, "R.create: unknown entity kind 'NonExistent'");
        });
      });
    });
  });

  describe('R.Entity', function() {
    helpers.usesUniverse().usesRootEntity();
    describe(".constructor.name", function() {
      helpers.defines(MyApp_SomeMethods).creates('entity', 'MyApp');
      return it("matches entity kind", function() {
        return equal(this.entity.constructor.name, 'MyApp');
      });
    });
    describe("composed of two classes", function() {
      helpers.defines(MyApp_SomeMethods, MyApp_OtherMethods).creates('entity', 'MyApp');
      return it("has the methods defined in both classes", function() {
        equal(this.entity.something(10), 11);
        return equal(this.entity.another(10), 20);
      });
    });
    describe("with a magical automatically_ block", function() {
      helpers.defines(SimpleEntity_WithAutomaticalBlock).createsInJob('entity', 'SimpleEntity', {
        someValue: 42
      });
      it("runs the block after entity creation", function() {
        return deepEqual(this.entity.list, [42]);
      });
      return describe("after the block's dependencies are updated", function() {
        helpers.performAndWait("update someValue", function() {
          return this.entity.someValue = 33;
        });
        return it("reruns the block after entity creation", function() {
          return deepEqual(this.entity.list, [42, 33]);
        });
      });
    });
    describe("that extends another entity", function() {
      helpers.defines(BaseEntity, DerivedEntity).createsInJob('entity', 'DerivedEntity');
      it("has its own initializers invoked", function() {
        return ok(this.entity.derivedInitialized);
      });
      it("inherits the base entity's initializers", function() {
        return ok(this.entity.baseInitialized);
      });
      it("has the derived entity's attributes", function() {
        return equal(this.entity.anotherValue, 33);
      });
      it("inherits the base entity's attributes", function() {
        return equal(this.entity.someValue, 42);
      });
      it("has the derived entity's methods", function() {
        return equal(this.entity.veryBoringMethod(), 12);
      });
      it("inherits the base entity's methods", function() {
        return equal(this.entity.boringMethod(), 24);
      });
      it("runs the derived entity's automatic blocks", function() {
        return equal(this.entity.anotherValueCopy, 33);
      });
      return it("inherits the base entity's automatic blocks", function() {
        return equal(this.entity.someValueCopy, 42);
      });
    });
    describe("that includes another entity", function() {
      helpers.defines(IncludingEntity).createsInJob('entity', 'IncludingEntity');
      it("obtains the included entity's initializers", function() {
        return ok(this.entity.baseInitialized);
      });
      it("obtains the included entity's attributes", function() {
        return equal(this.entity.someValue, 42);
      });
      it("obtains the included entity's methods", function() {
        return equal(this.entity.boringMethod(), 24);
      });
      return it("obtains the included entity's automatic blocks", function() {
        return equal(this.entity.someValueCopy, 42);
      });
    });
    describe("that references a non-existent  entity", function() {
      it("can be defined", function() {
        return this.universe.define(Tom_MutualRef);
      });
      return it("cannot be instantiated", function() {
        this.universe.define(Tom_MutualRef);
        return throws(/Unknown type/, (function(_this) {
          return function() {
            var tom;
            return tom = _this.universe.create('Tom');
          };
        })(this));
      });
    });
    return describe("with a cyclic reference to another entity", function() {
      return it("can be defined and instantiated", function() {
        var jerry, tom;
        this.universe.define(Tom_MutualRef, Jerry_MutualRef);
        tom = this.universe.create('Tom');
        return jerry = this.universe.create('Jerry');
      });
    });
  });

  describe('R.Entity attribute', function() {
    helpers.usesUniverse().usesLog();
    describe("(a boring regular one)", function() {
      helpers.defines(MyApp_EventCount).creates('entity', 'MyApp', {
        eventCount: 10
      });
      it("can be initialized by passing a value into constructor", function() {
        return equal(this.entity.eventCount, 10);
      });
      describe("when read via .get(attr)", function() {
        helpers.inspectReads();
        beforeEach(function() {
          return this.value = this.entity.get('eventCount');
        });
        it("returns the current value", function() {
          return equal(this.value, 10);
        });
        return it("records the dependency", function() {
          return this.log.equal(["reading MyApp1 eventCount"]);
        });
      });
      it("can be read directly", function() {
        return equal(this.entity.eventCount, 10);
      });
      it("can be set via .set()", function() {
        this.entity.set('eventCount', 20);
        return equal(this.entity.eventCount, 20);
      });
      describe("when set directly", function() {
        helpers.inspectBroadcasts();
        beforeEach(function() {
          return this.entity.eventCount = 20;
        });
        it("updates the value", function() {
          this.entity.eventCount = 20;
          return equal(this.entity.eventCount, 20);
        });
        return it("broadcasts a change event", function() {
          return this.log.equal(["change MyApp1 eventCount"]);
        });
      });
      return describe('when set to the same value', function() {
        helpers.inspectBroadcasts();
        beforeEach(function() {
          return this.entity.eventCount = 10;
        });
        return it("does not broadcast a change event", function() {
          return this.log.equal([]);
        });
      });
    });
    describe("not defined by the schema", function() {
      helpers.defines(MyApp_EventCount).creates('entity', 'MyApp', {
        eventCount: 10
      });
      it("throws an error when reading via #get", function() {
        var _ref1;
        return equal((_ref1 = catchAndReturnError((function(_this) {
          return function() {
            return _this.entity.get('missingAttr');
          };
        })(this))) != null ? _ref1.message : void 0, "Unknown attribute 'missingAttr'");
      });
      return it("throws an error when writing via #set", function() {
        var _ref1;
        return equal((_ref1 = catchAndReturnError((function(_this) {
          return function() {
            return _this.entity.set('missingAttr', 20);
          };
        })(this))) != null ? _ref1.message : void 0, "Unknown attribute 'missingAttr'");
      });
    });
    describe("with a default value", function() {
      helpers.usesRootEntity().defines(MyApp_EventCount_WithDefault).creates('entity', 'MyApp');
      return it("is initially set to the provided default value", function() {
        return equal(this.entity.eventCount, 42);
      });
    });
    describe("with a type", function() {
      helpers.usesRootEntity().defines(MyApp_EventCount).creates('entity', 'MyApp');
      it("is initially set to the type-specific default value", function() {
        return equal(this.entity.eventCount, 0);
      });
      describe("when assigned a value of a different compatible type", function() {
        return it("coerces the value into the correct type", function() {
          this.entity.eventCount = "11";
          equal(this.entity.eventCount, 11);
          return equal(typeof this.entity.eventCount, 'number');
        });
      });
      return describe("when assigned a value of an incompatible type", function() {
        return it("throws an error", function() {
          throws(/expected an integer/, (function(_this) {
            return function() {
              return _this.entity.eventCount = [];
            };
          })(this));
          return throws(/expected an integer/, (function(_this) {
            return function() {
              return _this.entity.eventCount = null;
            };
          })(this));
        });
      });
    });
    describe("with a duck type", function() {
      helpers.defines(LittleQuacker, Tom_InSouthboundDuckling).creates('tom', 'Tom');
      describe("when provided with the the right duck", function() {
        return it("eats it promptly", function() {
          this.tom.southernFriedDuck = {
            quacks: true,
            swims: false,
            calories: 100
          };
          return equal(this.tom.hunger(), 0);
        });
      });
      return describe("when provided with an ignited bomb", function() {
        return it("chokes and fails to eat", function() {
          throws(/expected a LittleQuacker-like object/, (function(_this) {
            return function() {
              return _this.tom.southernFriedDuck = {
                boomIn: 3,
                calories: 250000
              };
            };
          })(this));
          return equal(this.tom.hunger(), 100);
        });
      });
    });
    describe("with a compute function", function() {
      helpers.usesRootEntity().defines(MyApp_EventCount, MyApp_Status1);
      helpers.createsInJob('entity', 'MyApp', {
        eventCount: 10
      });
      it("is initially set to the default value", function() {
        return equal(this.universe.create('MyApp', {
          eventCount: 10
        }).status, "");
      });
      it("is eventually set to the computed value", function() {
        return equal(this.entity.status, "eventCount is 10");
      });
      return describe("when the source value is updated", function() {
        helpers.performAndWait("set eventCount", function() {
          return this.entity.eventCount = 20;
        });
        return it("the computed values is also eventually updated", function() {
          return equal(this.entity.status, "eventCount is 20");
        });
      });
    });
    describe("with an async compute function", function() {
      helpers.usesRootEntity().defines(LRRuby_Basics, LRRuby_Version);
      helpers.createsInJob('entity', 'LRRuby', {
        path: '/usr/bin/ruby'
      });
      it("is initially set to the default value", function() {
        return equal(this.universe.create('LRRuby', {
          path: '/usr/bin/ruby'
        }).version, "");
      });
      it("is eventually set to the computed value", function() {
        return equal(this.entity.version, "1.8.7");
      });
      return describe("when the source value is updated", function() {
        helpers.performAndWait("update ruby.path", function() {
          return this.entity.path = '/usr/local/bin/ruby';
        });
        return it("the computed values is also eventually updated", function() {
          return equal(this.entity.version, "1.9.3");
        });
      });
    });
    return describe("with a chain of dependent computed attributes", function() {
      helpers.usesRootEntity().defines(MyApp_EventCount, MyApp_DoubleEventCount, MyApp_SuperStatus, MyApp_Status2);
      helpers.createsInJob('entity', 'MyApp', {
        eventCount: 14
      });
      it("all computed attributes are eventually set to the final values", function() {
        equal(this.entity.doubleEventCount, 28);
        equal(this.entity.status, "doubleEventCount ends with 8");
        return equal(this.entity.superStatus, "(doubleEventCount ends with 8)");
      });
      describe("when the source attribute is updated", function() {
        helpers.inspectBroadcasts();
        helpers.performAndWait("set eventCount", function() {
          return this.entity.eventCount = 16;
        });
        it("the computed attributes are all eventually updated", function() {
          equal(this.entity.doubleEventCount, 32);
          equal(this.entity.status, "doubleEventCount ends with 2");
          return equal(this.entity.superStatus, "(doubleEventCount ends with 2)");
        });
        return it("change events are broadcasted for the source and computed attributes", function() {
          return this.log.equal(["change MyApp1 eventCount", "change MyApp1 doubleEventCount", "change MyApp1 status", "change MyApp1 superStatus"]);
        });
      });
      describe("when the source attribute is set to the same value", function() {
        helpers.inspectBroadcasts();
        helpers.performAndWait("set eventCount", function() {
          return this.entity.eventCount = 14;
        });
        return it("no change events are broadcasted", function() {
          return this.log.equal([]);
        });
      });
      return describe("when the source attribute is updated, but intermediate attribute value stays the same", function() {
        helpers.inspectBroadcasts();
        helpers.performAndWait("set eventCount", function() {
          return this.entity.eventCount = 9;
        });
        return it("no change events are broadcasted for unmodified values", function() {
          return this.log.equal(["change MyApp1 eventCount", "change MyApp1 doubleEventCount"]);
        });
      });
    });
  });

  describe("R.Task", function() {
    helpers.usesUniverse().usesRootEntity().usesLog();
    describe("with ONESHOT type, sync function and no subtasks", function() {
      beforeEach(function() {
        this.task1 = new R.Task(this.root, new R.TaskDef(this.universe, 'smt', R.TaskDef.ONESHOT, this.log.pusher("RTask1_smt.run")));
        return this.log.inspectTaskEvents(this.task1, ['completed', 'finalized']);
      });
      return it("reports completion and finalization", function(done) {
        var ___iced_passed_deferral, __iced_deferrals, __iced_k;
        __iced_k = __iced_k_noop;
        ___iced_passed_deferral = iced.findDeferral(arguments);
        (function(_this) {
          return (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "C:\\dev\\LiveReload\\node_modules\\newreactive\\test\\reactive_test.iced"
            });
            _this.task1.schedule().waitFinalized(__iced_deferrals.defer({
              lineno: 569
            }));
            __iced_deferrals._fulfill();
          });
        })(this)((function(_this) {
          return function() {
            _this.log.equal(['RTask1_smt.run', 'RTask1_smt.completed', 'RTask1_smt.finalized']);
            return done();
          };
        })(this));
      });
    });
    describe("with ONESHOT type, sync function and a subtask", function() {
      beforeEach(function() {
        var func1;
        func1 = (function(_this) {
          return function() {
            _this.log.push("RTask1_parent.start");
            _this.task2.schedule();
            return _this.log.push("RTask1_parent.end");
          };
        })(this);
        this.task1 = new R.Task(this.root, new R.TaskDef(this.universe, 'parent', R.TaskDef.ONESHOT, func1, {
          multiuse: false,
          reactive: false
        }));
        this.task2 = new R.Task(this.root, new R.TaskDef(this.universe, 'child', R.TaskDef.ONESHOT, this.log.pusher("RTask2_child.run"), {
          multiuse: false,
          reactive: false
        }));
        return this.log.inspectTaskEvents(this.task1, ['completed', 'finalized']).inspectTaskEvents(this.task2, ['completed', 'finalized']);
      });
      return it("reports parent task completion, then subtask completion/finalization, then parent task finalization", function(done) {
        var ___iced_passed_deferral, __iced_deferrals, __iced_k;
        __iced_k = __iced_k_noop;
        ___iced_passed_deferral = iced.findDeferral(arguments);
        (function(_this) {
          return (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "C:\\dev\\LiveReload\\node_modules\\newreactive\\test\\reactive_test.iced"
            });
            _this.task1.schedule().waitFinalized(__iced_deferrals.defer({
              lineno: 590
            }));
            __iced_deferrals._fulfill();
          });
        })(this)((function(_this) {
          return function() {
            _this.log.equal(['RTask1_parent.start', 'RTask1_parent.end', 'RTask1_parent.completed', 'RTask2_child.run', 'RTask2_child.completed', 'RTask2_child.finalized', 'RTask1_parent.finalized']);
            return done();
          };
        })(this));
      });
    });
    describe("with AUTOREPEAT type and a sync function that loves to change its dependencies", function() {
      var func;
      helpers.inspectSubscriptions().defines(MyApp_EventCount, MyApp_DoubleEventCount, MyApp_Status1).creates('entity', 'MyApp', {
        eventCount: 10
      });
      func = function() {
        var dummy, key, _i, _len, _ref1, _results;
        _ref1 = this.keys;
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          key = _ref1[_i];
          _results.push(dummy = this.entity[key]);
        }
        return _results;
      };
      beforeEach(function() {
        this.keys = ['eventCount', 'status'];
        return this.task1 = new R.Task(this.root, new R.TaskDef(this.universe, 'smt', R.TaskDef.AUTOREPEAT, func.bind(this)));
      });
      it("subscribes to the initial set topics", function(done) {
        var ___iced_passed_deferral, __iced_deferrals, __iced_k;
        __iced_k = __iced_k_noop;
        ___iced_passed_deferral = iced.findDeferral(arguments);
        (function(_this) {
          return (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "C:\\dev\\LiveReload\\node_modules\\newreactive\\test\\reactive_test.iced"
            });
            _this.task1.on('finalized', __iced_deferrals.defer({
              lineno: 614
            }));
            __iced_deferrals._fulfill();
          });
        })(this)((function(_this) {
          return function() {
            _this.log.equal(['sub RTask1_compute_doubleEventCount MyApp1 eventCount', 'sub RTask2_compute_status MyApp1 eventCount', 'sub RTask3_smt MyApp1 eventCount,status']);
            return done();
          };
        })(this));
      });
      describe("when a dependency is removed", function() {
        helpers.performAndWait("update eventCount", function() {
          this.keys = ['eventCount'];
          return this.entity.eventCount = 11;
        });
        return it("resubscribes to the new set of topics", function() {
          return this.log.equal(['sub RTask1_compute_doubleEventCount MyApp1 eventCount', 'sub RTask2_compute_status MyApp1 eventCount', 'sub RTask3_smt MyApp1 eventCount,status', 'sub RTask1_compute_doubleEventCount MyApp1 eventCount', 'sub RTask2_compute_status MyApp1 eventCount', 'sub RTask3_smt MyApp1 eventCount']);
        });
      });
      return describe("when a dependency is added", function() {
        helpers.performAndWait("update eventCount", function() {
          this.keys = ['eventCount', 'doubleEventCount'];
          return this.entity.eventCount = 12;
        });
        return it("resubscribes to the new set of topics", function() {
          return this.log.equal(['sub RTask1_compute_doubleEventCount MyApp1 eventCount', 'sub RTask2_compute_status MyApp1 eventCount', 'sub RTask3_smt MyApp1 eventCount,status', 'sub RTask1_compute_doubleEventCount MyApp1 eventCount', 'sub RTask2_compute_status MyApp1 eventCount', 'sub RTask3_smt MyApp1 eventCount,doubleEventCount']);
        });
      });
    });
    describe("with AUTOREPEAT type, sync function and no subtasks", function() {
      var func;
      helpers.defines(MyApp_EventCount).creates('entity', 'MyApp', {
        eventCount: 10
      });
      func = function() {
        return this.log.push("RTask1_smt.run eventCount=" + this.entity.eventCount);
      };
      beforeEach(function() {
        this.task1 = new R.Task(this.root, new R.TaskDef(this.universe, 'smt', R.TaskDef.AUTOREPEAT, func.bind(this)));
        return this.log.inspectTaskEvents(this.task1, ['completed', 'finalized']);
      });
      it("reports completion and finalization", function(done) {
        var ___iced_passed_deferral, __iced_deferrals, __iced_k;
        __iced_k = __iced_k_noop;
        ___iced_passed_deferral = iced.findDeferral(arguments);
        (function(_this) {
          return (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "C:\\dev\\LiveReload\\node_modules\\newreactive\\test\\reactive_test.iced"
            });
            _this.task1.on('finalized', __iced_deferrals.defer({
              lineno: 664
            }));
            __iced_deferrals._fulfill();
          });
        })(this)((function(_this) {
          return function() {
            _this.log.equal(['RTask1_smt.run eventCount=10', 'RTask1_smt.completed', 'RTask1_smt.finalized']);
            return done();
          };
        })(this));
      });
      it("accumulates dependencies when reading an entity", function() {
        var deps, ___iced_passed_deferral, __iced_deferrals, __iced_k;
        __iced_k = __iced_k_noop;
        ___iced_passed_deferral = iced.findDeferral(arguments);
        (function(_this) {
          return (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "C:\\dev\\LiveReload\\node_modules\\newreactive\\test\\reactive_test.iced"
            });
            _this.task1.on('finalized', __iced_deferrals.defer({
              lineno: 673
            }));
            __iced_deferrals._fulfill();
          });
        })(this)((function(_this) {
          return function() {
            deps = _this.task1.completedInvocation._topicsByDepId;
            deepEqual(Object.keys(deps).sort(), ['MyApp1']);
            return deepEqual(Object.keys(deps.MyApp1).sort(), ['eventCount']);
          };
        })(this));
      });
      return it("runs again when dependencies are updated", function(done) {
        var ___iced_passed_deferral, __iced_deferrals, __iced_k;
        __iced_k = __iced_k_noop;
        ___iced_passed_deferral = iced.findDeferral(arguments);
        (function(_this) {
          return (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "C:\\dev\\LiveReload\\node_modules\\newreactive\\test\\reactive_test.iced"
            });
            _this.task1.on('finalized', __iced_deferrals.defer({
              lineno: 680
            }));
            __iced_deferrals._fulfill();
          });
        })(this)((function(_this) {
          return function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "C:\\dev\\LiveReload\\node_modules\\newreactive\\test\\reactive_test.iced"
              });
              _this.performAndWait(__iced_deferrals.defer({
                lineno: 682
              }), "update eventCount", function() {
                return _this.entity.eventCount = 20;
              });
              __iced_deferrals._fulfill();
            })(function() {
              _this.log.equal(['RTask1_smt.run eventCount=10', 'RTask1_smt.completed', 'RTask1_smt.finalized', 'RTask1_smt.run eventCount=20', 'RTask1_smt.completed', 'RTask1_smt.finalized']);
              return done();
            });
          };
        })(this));
      });
    });
    return describe("with ONESHOT type and a failing sync function", function() {
      beforeEach(function() {
        this.task1 = new R.Task(this.root, new R.TaskDef(this.universe, 'smt', R.TaskDef.ONESHOT, (function() {
          throw new Error('ETEST');
        })));
        return this.log.inspectTaskEvents(this.task1, ['completed', 'finalized']);
      });
      return it("reports a failed completion", function(done) {
        var ___iced_passed_deferral, __iced_deferrals, __iced_k;
        __iced_k = __iced_k_noop;
        ___iced_passed_deferral = iced.findDeferral(arguments);
        (function(_this) {
          return (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "C:\\dev\\LiveReload\\node_modules\\newreactive\\test\\reactive_test.iced"
            });
            _this.task1.schedule().waitCompleted(__iced_deferrals.defer({
              lineno: 701
            }));
            __iced_deferrals._fulfill();
          });
        })(this)((function(_this) {
          return function() {
            equal("" + _this.task1.lastError, "Error: ETEST");
            return done();
          };
        })(this));
      });
    });
  });

  describe("R.Collection", function() {
    helpers.usesUniverse().usesRootEntity().usesLog().defines(LRRuby_Basics);
    describe('basic functionality', function() {
      helpers.defines(MyApp_RubyCollection1).creates('entity', 'MyApp');
      return it("works fine for a proof of concept", function(done) {
        var keys, ruby, task, ___iced_passed_deferral, __iced_deferrals, __iced_k;
        __iced_k = __iced_k_noop;
        ___iced_passed_deferral = iced.findDeferral(arguments);
        equal(typeof this.entity.rubies, 'object');
        ok(this.entity.rubies instanceof R.ListCollection);
        equal(this.entity.rubies.all.length, 0);
        ruby = this.universe.create('LRRuby');
        this.entity.rubies.push(ruby);
        equal(this.entity.rubies.all.length, 1);
        task = new R.Task(this.root, new R.TaskDef(this.universe, "Add Ruby", R.TaskDef.AUTOREPEAT, (function(_this) {
          return function() {
            _this.entity.rubies.push(ruby);
            return equal(_this.entity.rubies.all.length, 2);
          };
        })(this)));
        (function(_this) {
          return (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "C:\\dev\\LiveReload\\node_modules\\newreactive\\test\\reactive_test.iced"
            });
            task.schedule().waitFinalized(__iced_deferrals.defer({
              lineno: 725
            }));
            __iced_deferrals._fulfill();
          });
        })(this)((function(_this) {
          return function() {
            keys = Object.keys(_this.entity.rubies._queries);
            equal(keys.length, 1, "Wrong number of subscribed queries (" + keys.length + " instead of 1), actual subscribed IDs: " + (JSON.stringify(keys)));
            task.dispose();
            keys = Object.keys(_this.entity.rubies._queries);
            equal(keys.length, 0, "Wrong number of subscribed queries (" + keys.length + " instead of 0), actual subscribed IDs: " + (JSON.stringify(keys)));
            return done();
          };
        })(this));
      });
    });
    return describe("computed source collections", function() {
      helpers.defines(MyApp_SystemRubies).createsInJob('entity', 'MyApp');
      return it("work", function(done) {
        equal(this.entity.systemRubies.all.length, 3);
        equal(this.entity.systemRubies.all[0].constructor.name, 'LRRuby');
        equal(this.entity.systemRubies.all[1].constructor.name, 'LRRuby');
        equal(this.entity.systemRubies.all[2].constructor.name, 'LRRuby');
        equal(this.entity.systemRubies.all[0].path, '/usr/bin/ruby');
        equal(this.entity.systemRubies.all[1].path, '/usr/local/bin/ruby');
        return done();
      });
    });
  });

}).call(this);
