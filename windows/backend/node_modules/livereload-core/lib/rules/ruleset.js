// Generated by IcedCoffeeScript 1.8.0-d
(function() {
  var RuleSet, TypeToRuleClass, _;

  _ = require('underscore');

  TypeToRuleClass = {
    'compile-file': require('./rule').FileToFileRule
  };

  module.exports = RuleSet = (function() {
    function RuleSet() {}

    RuleSet.prototype.schema = {
      project: {
        type: Object
      },
      rules: {
        type: Array
      },
      availableActions: {
        type: Array
      }
    };

    RuleSet.prototype.setMemento = function(memento) {
      var info;
      return this.rules = (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = memento.length; _i < _len; _i++) {
          info = memento[_i];
          _results.push(this.createRule(this._findAction(info.action), info));
        }
        return _results;
      }).call(this);
    };

    RuleSet.prototype.memento = function() {
      var rule, _i, _len, _ref, _results;
      _ref = this.rules;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        rule = _ref[_i];
        _results.push(rule.memento());
      }
      return _results;
    };

    RuleSet.prototype.createRule = function(action, info) {
      var ruleClass;
      ruleClass = this._getRuleClassForAction(action);
      return this.universe.create(ruleClass, _.extend({}, {
        action: action,
        project: this.project
      }, info));
    };

    RuleSet.prototype.addRule = function(action, info) {
      return this.rules.push(this.createRule(action, info));
    };

    RuleSet.prototype._getRuleClassForAction = function(action) {
      return TypeToRuleClass[action.type] || (function() {
        throw new Error("Invalid 'type' of action " + action.constructor.name + ": " + (JSON.stringify(action.type)));
      })();
    };

    RuleSet.prototype._findAction = function(actionId) {
      return _.find(this.availableActions, (function(_this) {
        return function(a) {
          return a.id === actionId;
        };
      })(this)) || (function() {
        throw new Error("Unknown action ID " + actionId);
      })();
    };

    return RuleSet;

  })();

}).call(this);
