// Generated by IcedCoffeeScript 1.8.0-d
(function() {
  var CompilersAnalyzer, RelPathList, RelPathSpec, debug, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  debug = require('debug')('livereload:core:analyzer');

  _ref = require('pathspec'), RelPathList = _ref.RelPathList, RelPathSpec = _ref.RelPathSpec;

  module.exports = CompilersAnalyzer = (function(_super) {
    __extends(CompilersAnalyzer, _super);

    function CompilersAnalyzer() {
      return CompilersAnalyzer.__super__.constructor.apply(this, arguments);
    }

    CompilersAnalyzer.prototype.message = "Determining compilers";

    CompilersAnalyzer.prototype.computePathList = function() {
      var compiler, list, spec, _i, _j, _len, _len1, _ref1, _ref2;
      list = new RelPathList();
      _ref1 = this.session.pluginManager.allCompilers;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        compiler = _ref1[_i];
        _ref2 = compiler.sourceSpecs;
        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
          spec = _ref2[_j];
          list.include(RelPathSpec.parseGitStyleSpec(spec));
        }
      }
      return list;
    };

    CompilersAnalyzer.prototype.clear = function() {
      return this.project.compassMarkers = [];
    };

    CompilersAnalyzer.prototype.removed = function(relpath) {};

    CompilersAnalyzer.prototype.update = function(file, callback) {
      file.compiler = this.findCompiler(file.relpath);
      if (file.compiler) {
        file.outputNameMask || (file.outputNameMask = "*." + file.compiler.destinationExt);
      }
      return callback();
    };

    CompilersAnalyzer.prototype.findCompiler = function(relpath) {
      var compiler, spec, _i, _j, _len, _len1, _ref1, _ref2;
      _ref1 = this.session.pluginManager.allCompilers;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        compiler = _ref1[_i];
        _ref2 = compiler.sourceSpecs;
        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
          spec = _ref2[_j];
          if (RelPathSpec.parseGitStyleSpec(spec).matches(relpath)) {
            debug("PathAnalyzer: " + relpath + " matches compiler " + compiler.id);
            return compiler;
          }
        }
      }
      return null;
    };

    return CompilersAnalyzer;

  })(require('./base'));

}).call(this);
