// Generated by IcedCoffeeScript 1.8.0-d
(function() {
  var Graph, ImportAnalyzer, Path, RelPathList, RelPathSpec, debug, fs, iced, __iced_k, __iced_k_noop, _ref,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  iced = {
    Deferrals: (function() {
      function _Class(_arg) {
        this.continuation = _arg;
        this.count = 1;
        this.ret = null;
      }

      _Class.prototype._fulfill = function() {
        if (!--this.count) {
          return this.continuation(this.ret);
        }
      };

      _Class.prototype.defer = function(defer_params) {
        ++this.count;
        return (function(_this) {
          return function() {
            var inner_params, _ref;
            inner_params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            if (defer_params != null) {
              if ((_ref = defer_params.assign_fn) != null) {
                _ref.apply(null, inner_params);
              }
            }
            return _this._fulfill();
          };
        })(this);
      };

      return _Class;

    })(),
    findDeferral: function() {
      return null;
    },
    trampoline: function(_fn) {
      return _fn();
    }
  };
  __iced_k = __iced_k_noop = function() {};

  debug = require('debug')('livereload:core:analyzer');

  fs = require('fs');

  Path = require('path');

  Graph = require('../projects/graph');

  _ref = require('pathspec'), RelPathList = _ref.RelPathList, RelPathSpec = _ref.RelPathSpec;

  module.exports = ImportAnalyzer = (function(_super) {
    __extends(ImportAnalyzer, _super);

    function ImportAnalyzer() {
      return ImportAnalyzer.__super__.constructor.apply(this, arguments);
    }

    ImportAnalyzer.prototype.message = "Computing imports";

    ImportAnalyzer.prototype.computePathList = function() {
      var compiler, list, spec, _i, _j, _len, _len1, _ref1, _ref2;
      list = new RelPathList();
      _ref1 = this.session.pluginManager.allCompilers;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        compiler = _ref1[_i];
        _ref2 = compiler.sourceSpecs;
        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
          spec = _ref2[_j];
          list.include(RelPathSpec.parseGitStyleSpec(spec));
        }
      }
      return list;
    };

    ImportAnalyzer.prototype.clear = function() {
      return this.project.imports = new Graph();
    };

    ImportAnalyzer.prototype.removed = function(relpath) {
      return this.project.imports.remove(relpath);
    };

    ImportAnalyzer.prototype.update = function(file, callback) {
      var ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(_this) {
        return (function(__iced_k) {
          if (file.compiler) {
            debug("  ..." + file.relpath + " matches compiler " + file.compiler.name);
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "C:\\dev\\LiveReload\\node_modules\\livereload-core\\lib\\analyzers\\imports.iced",
                funcname: "ImportAnalyzer.update"
              });
              _this._updateCompilableFile(file, __iced_deferrals.defer({
                lineno: 28
              }));
              __iced_deferrals._fulfill();
            })(__iced_k);
          } else {
            return __iced_k();
          }
        });
      })(this)((function(_this) {
        return function() {
          return callback();
        };
      })(this));
    };

    ImportAnalyzer.prototype._updateCompilableFile = function(file, callback) {
      var err, fragment, fragments, importedRelPaths, re, result, text, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "C:\\dev\\LiveReload\\node_modules\\livereload-core\\lib\\analyzers\\imports.iced",
            funcname: "ImportAnalyzer._updateCompilableFile"
          });
          fs.readFile(file.fullPath, 'utf8', __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return text = arguments[1];
              };
            })(),
            lineno: 32
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          var _i, _len, _ref1;
          if (err) {
            debug("Error reading " + file.fullPath + ": " + err);
            return callback();
          }
          fragments = [];
          _ref1 = file.compiler.importRegExps;
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            re = _ref1[_i];
            text.replace(re, function($0, fragment) {
              debug("  ... ...found import of '" + fragment + "'");
              fragments.push(fragment);
              return $0;
            });
          }
          importedRelPaths = [];
          (function(__iced_k) {
            var _j, _len1, _ref2, _results, _while;
            _ref2 = fragments;
            _len1 = _ref2.length;
            _j = 0;
            _results = [];
            _while = function(__iced_k) {
              var _break, _continue, _next;
              _break = function() {
                return __iced_k(_results);
              };
              _continue = function() {
                return iced.trampoline(function() {
                  ++_j;
                  return _while(__iced_k);
                });
              };
              _next = function(__iced_next_arg) {
                _results.push(__iced_next_arg);
                return _continue();
              };
              if (!(_j < _len1)) {
                return _break();
              } else {
                fragment = _ref2[_j];
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "C:\\dev\\LiveReload\\node_modules\\livereload-core\\lib\\analyzers\\imports.iced",
                    funcname: "ImportAnalyzer._updateCompilableFile"
                  });
                  _this.project.watcher.tree.findFilesBySuffix(fragment, {
                    bestSubtree: Path.dirname(file.relpath)
                  }, __iced_deferrals.defer({
                    assign_fn: (function() {
                      return function() {
                        err = arguments[0];
                        return result = arguments[1];
                      };
                    })(),
                    lineno: 46
                  }));
                  __iced_deferrals._fulfill();
                })(function() {
                  return _next(err ? debug("  ... ...error in findFilesMatchingSuffixInSubtree: " + err) : result.bestMatch ? (debug("  ... ...imported file found at " + result.bestMatch.path), importedRelPaths.push(result.bestMatch.path)) : debug("  ... ...imported file not found in project tree"));
                });
              }
            };
            _while(__iced_k);
          })(function() {
            debug("  ...imported paths = " + JSON.stringify(importedRelPaths));
            _this.project.imports.updateOutgoing(file.relpath, importedRelPaths);
            return callback();
          });
        };
      })(this));
    };

    return ImportAnalyzer;

  })(require('./base'));

}).call(this);
