// Generated by IcedCoffeeScript 1.8.0-d
(function() {
  var CompilationRule, Graph, Path, RelPathList, RelPathSpec, RuleAnalyzer, debug, fs, _, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  debug = require('debug')('livereload:core:analyzer');

  fs = require('fs');

  Path = require('path');

  _ = require('underscore');

  Graph = require('../projects/graph');

  _ref = require('pathspec'), RelPathList = _ref.RelPathList, RelPathSpec = _ref.RelPathSpec;

  CompilationRule = require('../misc/rule').CompilationRule;

  module.exports = RuleAnalyzer = (function(_super) {
    __extends(RuleAnalyzer, _super);

    function RuleAnalyzer() {
      return RuleAnalyzer.__super__.constructor.apply(this, arguments);
    }

    RuleAnalyzer.prototype.message = "Computing path rules";

    RuleAnalyzer.prototype.computePathList = function() {
      var compiler, list, spec, _i, _j, _len, _len1, _ref1, _ref2;
      list = new RelPathList();
      _ref1 = this.session.pluginManager.allCompilers;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        compiler = _ref1[_i];
        _ref2 = compiler.sourceSpecs;
        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
          spec = _ref2[_j];
          list.include(RelPathSpec.parseGitStyleSpec(spec));
        }
      }
      return list;
    };

    RuleAnalyzer.prototype.clear = function() {};

    RuleAnalyzer.prototype.removed = function(relpath) {};

    RuleAnalyzer.prototype.update = function(file, callback) {
      return callback();
    };

    RuleAnalyzer.prototype.after = function(callback) {
      var compilableFiles, compilablePaths, compiler, implicitRules, path, rule, _i, _len, _ref1;
      compilablePaths = this.project.tree.findMatchingPaths(this.list);
      compilableFiles = _.compact((function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = compilablePaths.length; _i < _len; _i++) {
          path = compilablePaths[_i];
          _results.push(this.project.fileAt(path));
        }
        return _results;
      }).call(this));
      implicitRules = [];
      _ref1 = this.project.availableCompilers;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        compiler = _ref1[_i];
        if (this.project.tree.findMatchingPaths(compiler.sourceFilter).length > 0) {
          rule = new CompilationRule();
          rule.sourceSpec = "**/*." + compiler.extensions[0];
          rule.destSpec = "**/*." + compiler.destinationExt;
        }
      }
      this.project.rules = implicitRules;
      return callback();
    };

    return RuleAnalyzer;

  })(require('./base'));

}).call(this);
