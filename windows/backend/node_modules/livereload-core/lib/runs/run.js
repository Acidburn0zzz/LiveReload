// Generated by IcedCoffeeScript 1.8.0-d
(function() {
  var EventEmitter, Run, debug,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  debug = require('debug')('livereload:core');

  EventEmitter = require('events').EventEmitter;

  module.exports = Run = (function(_super) {
    __extends(Run, _super);

    function Run(project, change, steps) {
      this.project = project;
      this.change = change;
      this.steps = steps;
      this.remainingSteps = this.steps.slice();
      this.queue = this.project.session.queue;
    }

    Run.prototype.toString = function() {
      var desc, paths;
      paths = this.change.paths;
      desc = paths.slice(0, 2).join(',') + (paths.length > 2 ? ",â€¦" : "");
      return "Run(" + desc + ")";
    };

    Run.prototype.start = function() {
      return this.performNextStep();
    };

    Run.prototype.finished = function() {
      return this.emit('finish');
    };

    Run.prototype.performNextStep = function() {
      if (this.currentStep = this.remainingSteps.shift()) {
        debug("Run performing step: " + this.currentStep.constructor.name + " " + this.currentStep);
        this.emit('step', this);
        this.currentStep.schedule(this.change);
        return this.queue.checkpoint(this._stepFinished.bind(this), "" + this + ".stepFinished");
      } else {
        debug("Run finished.");
        return this.finished();
      }
    };

    Run.prototype._stepFinished = function() {
      return this.performNextStep();
    };

    return Run;

  })(EventEmitter);

}).call(this);
