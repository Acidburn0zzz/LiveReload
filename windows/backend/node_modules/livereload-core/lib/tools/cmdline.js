// Generated by IcedCoffeeScript 1.8.0-d
(function() {
  var CommandLineTool, Invocation, debug, iced, spawn, subst, _, __iced_k, __iced_k_noop,
    __slice = [].slice;

  iced = {
    Deferrals: (function() {
      function _Class(_arg) {
        this.continuation = _arg;
        this.count = 1;
        this.ret = null;
      }

      _Class.prototype._fulfill = function() {
        if (!--this.count) {
          return this.continuation(this.ret);
        }
      };

      _Class.prototype.defer = function(defer_params) {
        ++this.count;
        return (function(_this) {
          return function() {
            var inner_params, _ref;
            inner_params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            if (defer_params != null) {
              if ((_ref = defer_params.assign_fn) != null) {
                _ref.apply(null, inner_params);
              }
            }
            return _this._fulfill();
          };
        })(this);
      };

      return _Class;

    })(),
    findDeferral: function() {
      return null;
    },
    trampoline: function(_fn) {
      return _fn();
    }
  };
  __iced_k = __iced_k_noop = function() {};

  debug = require('debug')('livereload:core:tools:cmdline');

  subst = require('subst');

  spawn = require('child_process').spawn;

  _ = require('underscore');

  Invocation = require('./invocation');

  module.exports = CommandLineTool = (function() {
    function CommandLineTool(_arg) {
      this.name = _arg.name, this.args = _arg.args, this.cwd = _arg.cwd, this.parser = _arg.parser, this.info = _arg.info;
      this.info || (this.info = {});
    }

    CommandLineTool.prototype.toString = function() {
      return "CommandLineTool(" + this.name + ")";
    };

    CommandLineTool.prototype.createInvocation = function(info) {
      return new Invocation(this, info);
    };

    CommandLineTool.prototype.invoke = function(invocation, callback) {
      var args, command, cwd, exitCode, info, messages, parsed, stderr, stdout, subprocess, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      info = _.extend({}, invocation.info, this.info);
      args = subst(this.args, info);
      cwd = subst(this.cwd, info);
      debug("Invoking command line: " + (JSON.stringify(args)));
      command = args.shift();
      subprocess = spawn(command, args, {
        cwd: cwd,
        env: process.env
      });
      stdout = [];
      stderr = [];
      subprocess.stdout.setEncoding('utf8');
      subprocess.stderr.setEncoding('utf8');
      subprocess.stdout.on('data', (function(_this) {
        return function(data) {
          return stdout.push(data);
        };
      })(this));
      subprocess.stderr.on('data', (function(_this) {
        return function(data) {
          return stderr.push(data);
        };
      })(this));
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "C:\\dev\\LiveReload\\node_modules\\livereload-core\\lib\\tools\\cmdline.iced",
            funcname: "CommandLineTool.invoke"
          });
          subprocess.on('exit', __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return exitCode = arguments[0];
              };
            })(),
            lineno: 40
          }));
          subprocess.on('close', __iced_deferrals.defer({
            lineno: 41
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          stdout = stdout.join('');
          stderr = stderr.join('');
          debug("Command outputs: " + JSON.stringify({
            stdout: stdout,
            stderr: stderr,
            exitCode: exitCode
          }, null, 2));
          parsed = {
            stdout: _this.parser.parse(stdout),
            stderr: _this.parser.parse(stderr)
          };
          messages = parsed.stdout.messages.concat(parsed.stderr.messages);
          if (exitCode === 127) {
            messages.push({
              type: "error",
              message: "Invocation failed, cannot execute " + command
            });
          } else if ((exitCode !== 0) && (messages.length === 0)) {
            messages.push({
              type: "error",
              message: "Non-zero exit code " + exitCode + " returned by " + command
            });
          }
          debug("Messages: " + JSON.stringify(messages, null, 2));
          invocation.messages = messages;
          return callback(null);
        };
      })(this));
    };

    return CommandLineTool;

  })();

}).call(this);
