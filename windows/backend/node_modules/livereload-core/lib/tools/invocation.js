// Generated by IcedCoffeeScript 1.8.0-d
(function() {
  var EventEmitter, Invocation,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EventEmitter = require('events').EventEmitter;

  module.exports = Invocation = (function(_super) {
    var CANCELLED, FINISHED, PENDING, RUNNING;

    __extends(Invocation, _super);

    Invocation.PENDING = PENDING = 'pending';

    Invocation.RUNNING = RUNNING = 'running';

    Invocation.FINISHED = FINISHED = 'finished';

    Invocation.CANCELLED = CANCELLED = 'cancelled';

    function Invocation(tool, info) {
      this.tool = tool;
      this.info = info;
      this.messages = [];
      this.status = PENDING;
      this.error = null;
      this.succeeded = false;
    }

    Invocation.prototype.addMessages = function(messages) {
      var message, _i, _len;
      this.messages.push.apply(this.messages, messages);
      for (_i = 0, _len = messages.length; _i < _len; _i++) {
        message = messages[_i];
        if (message.type === 'error') {
          if (!this.error) {
            this.error = message;
          }
        }
      }
      return emit("messages:changed");
    };

    Invocation.prototype.run = function() {
      this.status = RUNNING;
      return this.tool.invoke(this, (function(_this) {
        return function() {
          if (!_this.error) {
            _this.succeeded = true;
          }
          _this.status = FINISHED;
          return _this.emit('finished');
        };
      })(this));
    };

    return Invocation;

  })(EventEmitter);

}).call(this);
