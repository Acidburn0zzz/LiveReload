// Generated by IcedCoffeeScript 1.8.0-d
(function() {
  var ActionInstance_Basics, Action_Basics, Invocation, Project_Actions, Rule_Basics, Step_Basics;

  Action_Basics = (function() {
    function Action_Basics() {}

    Action_Basics.prototype.schema = {
      tool: {
        type: 'Tool'
      },
      category: {
        type: String
      }
    };

    Action_Basics.prototype.computeDefaultRules = function() {
      return [];
    };

    return Action_Basics;

  })();

  Project_Actions = (function() {
    function Project_Actions() {}

    Project_Actions.prototype.schema = {
      availableActions: {
        collection: 'list',
        type: 'Action'
      },
      actionInstances: {
        collection: 'list',
        type: 'ActionInstance'
      }
    };

    Project_Actions.prototype.compute_actionInstances = function() {
      return [];
    };

    return Project_Actions;

  })();

  ActionInstance_Basics = (function() {
    function ActionInstance_Basics() {}

    ActionInstance_Basics.prototype.schema = {
      action: {
        type: 'Action'
      },
      defaultRules: {
        type: {
          array: 'Rule'
        }
      }
    };

    ActionInstance_Basics.prototype.compute_defaultRules = function() {
      return this.action.computeDefaultRules();
    };

    return ActionInstance_Basics;

  })();

  Rule_Basics = (function() {
    function Rule_Basics() {}

    Rule_Basics.prototype.schema = {
      action: {
        type: 'Action'
      },
      actionInstance: {
        type: 'ActionInstance'
      },
      steps: {
        type: 'Step'
      }
    };

    return Rule_Basics;

  })();

  Step_Basics = (function() {
    function Step_Basics() {}

    Step_Basics.prototype.schema = {
      rule: {
        type: 'Rule'
      },
      pendingInvocations: {
        collection: 'list',
        type: 'Invocation'
      }
    };

    Step_Basics.prototype.compute_pendingInvocations = function() {
      return [];
    };

    return Step_Basics;

  })();

  Invocation = (function() {
    var CANCELLED, FINISHED, PENDING, RUNNING;

    Invocation.prototype.schema = {
      step: {
        type: 'Step'
      },
      status: {
        type: String
      }
    };

    Invocation.PENDING = PENDING = 'pending';

    Invocation.RUNNING = RUNNING = 'running';

    Invocation.FINISHED = FINISHED = 'finished';

    Invocation.CANCELLED = CANCELLED = 'cancelled';

    function Invocation(tool, info) {
      this.tool = tool;
      this.info = info;
      this.messages = [];
      this.status = PENDING;
      this.error = null;
      this.succeeded = false;
    }

    Invocation.prototype.addMessages = function(messages) {
      var message, _i, _len;
      this.messages.push.apply(this.messages, messages);
      for (_i = 0, _len = messages.length; _i < _len; _i++) {
        message = messages[_i];
        if (message.type === 'error') {
          if (!this.error) {
            this.error = message;
          }
        }
      }
      return this.emit("messages:changed");
    };

    Invocation.prototype.run = function() {
      this.status = RUNNING;
      return this.tool.invoke(this, (function(_this) {
        return function() {
          if (!_this.error) {
            _this.succeeded = true;
          }
          _this.status = FINISHED;
          return _this.emit('finished');
        };
      })(this));
    };

    return Invocation;

  })();

  exports.definitions = [
    {
      name: 'Tool',
      duck: {
        isLiveReloadTool: true
      }
    }, Action_Basics, ActionInstance_Basics, Rule_Basics, Step_Basics, Invocation
  ];

}).call(this);
