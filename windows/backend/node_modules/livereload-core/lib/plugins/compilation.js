// Generated by IcedCoffeeScript 1.8.0-d
(function() {
  var CompilationPlugin, CompilationStep, Path, RelPathList, RelPathSpec, debug, iced, __iced_k, __iced_k_noop, _ref,
    __slice = [].slice;

  iced = {
    Deferrals: (function() {
      function _Class(_arg) {
        this.continuation = _arg;
        this.count = 1;
        this.ret = null;
      }

      _Class.prototype._fulfill = function() {
        if (!--this.count) {
          return this.continuation(this.ret);
        }
      };

      _Class.prototype.defer = function(defer_params) {
        ++this.count;
        return (function(_this) {
          return function() {
            var inner_params, _ref;
            inner_params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            if (defer_params != null) {
              if ((_ref = defer_params.assign_fn) != null) {
                _ref.apply(null, inner_params);
              }
            }
            return _this._fulfill();
          };
        })(this);
      };

      return _Class;

    })(),
    findDeferral: function() {
      return null;
    },
    trampoline: function(_fn) {
      return _fn();
    }
  };
  __iced_k = __iced_k_noop = function() {};

  debug = require('debug')('livereload:core:compilation');

  Path = require('path');

  _ref = require('pathspec'), RelPathList = _ref.RelPathList, RelPathSpec = _ref.RelPathSpec;

  module.exports = CompilationPlugin = (function() {
    function CompilationPlugin() {}

    CompilationPlugin.prototype.metadata = {
      apiVersion: 1,
      name: 'livereload-compilation'
    };

    CompilationPlugin.prototype.jobPriorities = ['compilation'];

    CompilationPlugin.prototype.loadProject = function(project, memento) {};

    CompilationPlugin.prototype.createSteps = function(project) {
      return [new CompilationStep(project)];
    };

    return CompilationPlugin;

  })();

  CompilationStep = (function() {
    function CompilationStep(project) {
      this.project = project;
      this.id = 'compilation';
      this.session = this.project.session;
      this.queue = this.project.session.queue;
    }

    CompilationStep.prototype.initialize = function() {
      return this.queue.register({
        project: this.project.id,
        action: 'compile'
      }, this._perform.bind(this));
    };

    CompilationStep.prototype.schedule = function(change) {
      return this.queue.add({
        project: this.project.id,
        action: 'compile',
        paths: change.paths.slice(0),
        changes: [change]
      });
    };

    CompilationStep.prototype._perform = function(request, done) {
      var active, change, compiled, file, found, reloadRequest, relpath, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      active = this.project.compilationEnabled;
      compiled = {};
      (function(_this) {
        return (function(__iced_k) {
          var _i, _len, _ref1, _results, _while;
          _ref1 = request.changes;
          _len = _ref1.length;
          _i = 0;
          _results = [];
          _while = function(__iced_k) {
            var _break, _continue, _next;
            _break = function() {
              return __iced_k(_results);
            };
            _continue = function() {
              return iced.trampoline(function() {
                ++_i;
                return _while(__iced_k);
              });
            };
            _next = function(__iced_next_arg) {
              _results.push(__iced_next_arg);
              return _continue();
            };
            if (!(_i < _len)) {
              return _break();
            } else {
              change = _ref1[_i];
              (function(__iced_k) {
                var _j, _len1, _ref2, _results1, _while;
                _ref2 = change.paths;
                _len1 = _ref2.length;
                _j = 0;
                _results1 = [];
                _while = function(__iced_k) {
                  var _break, _continue, _next;
                  _break = function() {
                    return __iced_k(_results1);
                  };
                  _continue = function() {
                    return iced.trampoline(function() {
                      ++_j;
                      return _while(__iced_k);
                    });
                  };
                  _next = function(__iced_next_arg) {
                    _results1.push(__iced_next_arg);
                    return _continue();
                  };
                  if (!(_j < _len1)) {
                    return _break();
                  } else {
                    relpath = _ref2[_j];
                    (function(__iced_k) {
                      if (compiled.hasOwnProperty(relpath)) {
                        (function(__iced_k) {
_continue()
                        })(__iced_k);
                      } else {
                        return __iced_k();
                      }
                    })(function() {
                      debug("Looking for compiler for " + relpath + "...");
                      found = false;
                      (function(__iced_k) {
                        if (file = _this.project.fileAt(relpath)) {
                          (function(__iced_k) {
                            if (file.compiler && file.outputNameMask) {
                              (function(__iced_k) {
                                if (active) {
                                  (function(__iced_k) {
                                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                                      parent: ___iced_passed_deferral,
                                      filename: "C:\\dev\\LiveReload\\node_modules\\livereload-core\\lib\\plugins\\compilation.iced",
                                      funcname: "CompilationStep._perform"
                                    });
                                    _this._performCompilation(file, __iced_deferrals.defer({
                                      lineno: 61
                                    }));
                                    __iced_deferrals._fulfill();
                                  })(__iced_k);
                                } else {
                                  return __iced_k(file.outputNameMask ? change.reloadRequests.push({
                                    path: file.destName,
                                    originalPath: relpath
                                  }) : void 0);
                                }
                              })(function() {
                                debug("found = yes, relpath = " + relpath + ", file.outputNameMask = " + file.outputNameMask);
                                return __iced_k(found = true);
                              });
                            } else {
                              return __iced_k();
                            }
                          })(__iced_k);
                        } else {
                          return __iced_k();
                        }
                      })(function() {
                        return _next(found ? compiled[relpath] = true : void 0);
                      });
                    });
                  }
                };
                _while(__iced_k);
              })(_next);
            }
          };
          _while(__iced_k);
        });
      })(this)((function(_this) {
        return function() {
          var _i, _len, _ref1;
          debug("request.changes = " + (JSON.stringify(request.changes, null, 2)));
          debug("compiled = " + (JSON.stringify(compiled, null, 2)));
          _ref1 = request.changes;
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            change = _ref1[_i];
            change.reloadRequests = (function() {
              var _j, _len1, _ref2, _results;
              _ref2 = change.reloadRequests;
              _results = [];
              for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
                reloadRequest = _ref2[_j];
                if (!compiled.hasOwnProperty(reloadRequest.path)) {
                  _results.push(reloadRequest);
                }
              }
              return _results;
            })();
          }
          return done();
        };
      })(this));
    };

    CompilationStep.prototype._performCompilation = function(file, callback) {
      var action, dstInfo, info, invocation, rubyExecPath, srcInfo;
      srcInfo = this._fileInfo(file.relpath);
      dstInfo = this._fileInfo(file.destRelPath);
      rubyExecPath = this.session.rubies.length > 0 ? Path.join(this.session.rubies[0].path, "bin", "ruby" + (process.platform === 'win32' ? '.exe' : '')) : 'ruby';
      info = {
        '$(project_dir)': this.project.fullPath,
        '$(ruby)': rubyExecPath,
        '$(node)': process.execPath,
        '$(src_rel_path)': srcInfo.relpath,
        '$(src_path)': srcInfo.path,
        '$(src_dir)': srcInfo.dir,
        '$(src_file)': srcInfo.file,
        '$(dst_rel_path)': dstInfo.relpath,
        '$(dst_path)': dstInfo.path,
        '$(dst_dir)': dstInfo.dir,
        '$(dst_file)': dstInfo.file,
        '$(additional)': []
      };
      action = {
        id: 'compile',
        message: "Compiling " + srcInfo.file
      };
      invocation = file.compiler.tool.createInvocation(info);
      this.project.reportActionStart(action);
      invocation.once('finished', (function(_this) {
        return function() {
          _this.project.reportActionFinish(action);
          return callback();
        };
      })(this));
      return invocation.run();
    };

    CompilationStep.prototype._fileInfo = function(relpath) {
      var fullPath;
      fullPath = Path.join(this.project.fullPath, relpath);
      return {
        relpath: relpath,
        file: Path.basename(relpath),
        path: fullPath,
        dir: Path.dirname(fullPath)
      };
    };

    return CompilationStep;

  })();

}).call(this);
