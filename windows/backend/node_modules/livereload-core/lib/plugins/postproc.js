// Generated by IcedCoffeeScript 1.8.0-d
(function() {
  var PostProcPlugin, PostProcStep, debug, iced, __iced_k, __iced_k_noop,
    __slice = [].slice;

  iced = {
    Deferrals: (function() {
      function _Class(_arg) {
        this.continuation = _arg;
        this.count = 1;
        this.ret = null;
      }

      _Class.prototype._fulfill = function() {
        if (!--this.count) {
          return this.continuation(this.ret);
        }
      };

      _Class.prototype.defer = function(defer_params) {
        ++this.count;
        return (function(_this) {
          return function() {
            var inner_params, _ref;
            inner_params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            if (defer_params != null) {
              if ((_ref = defer_params.assign_fn) != null) {
                _ref.apply(null, inner_params);
              }
            }
            return _this._fulfill();
          };
        })(this);
      };

      return _Class;

    })(),
    findDeferral: function() {
      return null;
    },
    trampoline: function(_fn) {
      return _fn();
    }
  };
  __iced_k = __iced_k_noop = function() {};

  debug = require('debug')('livereload:core:postproc');

  module.exports = PostProcPlugin = (function() {
    function PostProcPlugin() {}

    PostProcPlugin.prototype.metadata = {
      apiVersion: 1,
      name: 'livereload-postproc'
    };

    PostProcPlugin.prototype.jobPriorities = ['postproc'];

    PostProcPlugin.prototype.loadProject = function(project, memento) {
      var _ref, _ref1;
      project.postprocCommand = ((_ref = memento != null ? memento.postproc : void 0) != null ? _ref : '').trim();
      project.postprocEnabled = !!((_ref1 = memento != null ? memento.postprocEnabled : void 0) != null ? _ref1 : project.postprocCommand.length > 0);
      project.postprocLastRunTime = 0;
      return project.postprocGracePeriod = 500;
    };

    PostProcPlugin.prototype.createSteps = function(project) {
      return [new PostProcStep(project)];
    };

    return PostProcPlugin;

  })();

  PostProcStep = (function() {
    function PostProcStep(project) {
      this.project = project;
      this.id = 'postproc';
      this.queue = this.project.session.queue;
    }

    PostProcStep.prototype.initialize = function() {
      return this.queue.register({
        project: this.project.id,
        action: 'postproc'
      }, this._perform.bind(this));
    };

    PostProcStep.prototype.schedule = function(change) {
      return this.queue.add({
        project: this.project.id,
        action: 'postproc'
      });
    };

    PostProcStep.prototype._isAwaitingGracePeriod = function() {
      return (this.project.postprocLastRunTime > 0) && (Date.now() < this.project.postprocLastRunTime + this.project.postprocGracePeriod);
    };

    PostProcStep.prototype._isPostProcessingActive = function() {
      return this.project.postprocEnabled && this.project.postprocCommand;
    };

    PostProcStep.prototype._perform = function(request, done) {
      var err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      if (!this._isPostProcessingActive()) {
        return done(null);
      }
      if (!this._isAwaitingGracePeriod()) {
        (function(_this) {
          return (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "C:\\dev\\LiveReload\\node_modules\\livereload-core\\lib\\plugins\\postproc.iced",
              funcname: "PostProcStep._perform"
            });
            _this._runPostproc(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return err = arguments[0];
                };
              })(),
              lineno: 52
            }));
            __iced_deferrals._fulfill();
          });
        })(this)((function(_this) {
          return function() {
            _this.project.postprocLastRunTime = Date.now();
            return __iced_k(done(err));
          };
        })(this));
      } else {
        debug("Skipping post-processing: grace period of " + this.project.postprocGracePeriod + " ms hasn't expired");
        return __iced_k(done(null));
      }
    };

    PostProcStep.prototype._runPostproc = function(callback) {
      var action, info, invocation, parser, tool;
      parser = new this.project.session.MessageParser({});
      tool = new this.project.session.CommandLineTool({
        name: 'postproc',
        args: ['sh', '-c', this.project.postprocCommand],
        cwd: this.project.fullPath,
        parser: parser
      });
      info = {
        '$(projectDir)': this.project.fullPath
      };
      invocation = tool.createInvocation(info);
      action = {
        id: 'postproc',
        message: "Running " + this.project.postprocCommand
      };
      this.project.reportActionStart(action);
      invocation.once('finished', (function(_this) {
        return function() {
          _this.project.reportActionFinish(action);
          return callback(null);
        };
      })(this));
      return invocation.run();
    };

    return PostProcStep;

  })();

}).call(this);
