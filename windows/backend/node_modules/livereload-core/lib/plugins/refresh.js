// Generated by IcedCoffeeScript 1.8.0-d
(function() {
  var RefreshPlugin, RefreshStep, debug;

  debug = require('debug')('livereload:core:refresh');

  module.exports = RefreshPlugin = (function() {
    function RefreshPlugin() {}

    RefreshPlugin.prototype.metadata = {
      apiVersion: 1,
      name: 'livereload-refresh'
    };

    RefreshPlugin.prototype.jobPriorities = ['refresh'];

    RefreshPlugin.prototype.loadProject = function(project, memento) {};

    RefreshPlugin.prototype.createSteps = function(project) {
      return [new RefreshStep(project)];
    };

    return RefreshPlugin;

  })();

  RefreshStep = (function() {
    function RefreshStep(project) {
      this.project = project;
      this.id = 'refresh';
      this.session = this.project.session;
      this.queue = this.session.queue;
    }

    RefreshStep.prototype.initialize = function() {
      return this.queue.register({
        project: this.project.id,
        action: 'refresh'
      }, this._perform.bind(this));
    };

    RefreshStep.prototype.schedule = function(change) {
      this.queue.add({
        project: this.project.id,
        action: 'refresh',
        reloadRequests: change.reloadRequests.slice(0)
      });
      return debug("Scheduled browser refresh job for change: " + JSON.stringify(change));
    };

    RefreshStep.prototype._perform = function(request, done) {
      var action, command, reloadRequest, _i, _len, _ref;
      debug("Executing browser refresh job: " + JSON.stringify(request));
      if (request.reloadRequests.length === 0) {
        return done(null);
      }
      action = {
        id: 'refresh',
        message: "Refreshing browser"
      };
      this.project.reportActionStart(action);
      _ref = request.reloadRequests;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        reloadRequest = _ref[_i];
        command = {
          command: 'reload',
          path: reloadRequest.path,
          originalPath: reloadRequest.originalPath || '',
          liveCSS: !this.project.disableLiveRefresh
        };
        this.session.sendBrowserCommand(command);
      }
      this.project.reportActionFinish(action);
      return done(null);
    };

    return RefreshStep;

  })();

}).call(this);
