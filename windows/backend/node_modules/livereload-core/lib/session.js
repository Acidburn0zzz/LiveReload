// Generated by IcedCoffeeScript 1.8.0-d
(function() {
  var EventEmitter, JobQueue, PlaPath, PluginManager, Project, R, RelPathList, Session, debug, iced, __iced_k, __iced_k_noop, _ref,
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __hasProp = {}.hasOwnProperty;

  iced = {
    Deferrals: (function() {
      function _Class(_arg) {
        this.continuation = _arg;
        this.count = 1;
        this.ret = null;
      }

      _Class.prototype._fulfill = function() {
        if (!--this.count) {
          return this.continuation(this.ret);
        }
      };

      _Class.prototype.defer = function(defer_params) {
        ++this.count;
        return (function(_this) {
          return function() {
            var inner_params, _ref;
            inner_params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            if (defer_params != null) {
              if ((_ref = defer_params.assign_fn) != null) {
                _ref.apply(null, inner_params);
              }
            }
            return _this._fulfill();
          };
        })(this);
      };

      return _Class;

    })(),
    findDeferral: function() {
      return null;
    },
    trampoline: function(_fn) {
      return _fn();
    }
  };
  __iced_k = __iced_k_noop = function() {};

  debug = require('debug')('livereload:core:session');

  EventEmitter = require('events').EventEmitter;

  Project = require('./projects/project');

  R = require('newreactive');

  PluginManager = require('./pluginmgr/plugin').PluginManager;

  JobQueue = require('jobqueue');

  _ref = require('pathspec'), RelPathList = _ref.RelPathList, PlaPath = _ref.PlaPath;

  Session = (function() {
    function Session() {}

    Session.prototype.schema = {
      projects: {
        type: Array
      }
    };

    Session.prototype.initialize = function(options) {
      var plugin, _i, _len, _ref1;
      this.universe.define(require('./rules/rule').Rule);
      this.plugins = [];
      this.projectsMemento = {};
      this.queue = new JobQueue();
      this.CommandLineTool = require('./tools/cmdline');
      this.MessageParser = require('./messages/parser');
      _ref1 = ['compilation', 'postproc', 'refresh'];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        plugin = _ref1[_i];
        if ((options.stdPlugins == null) || (Array.isArray(options.stdPlugins) && (__indexOf.call(options.stdPlugins, plugin) >= 0))) {
          this.addPlugin(new (require("./plugins/" + plugin))());
        }
      }
      this.pluginManager = new PluginManager();
      this.rubies = [];
      this.queue.register({
        action: 'rescan-plugins'
      }, this._rescanPlugins.bind(this));
      this.queue.add({
        action: 'rescan-plugins'
      });
      this._customMonitoringFilter = new RelPathList();
      this._implicitMonitoringFilter = new RelPathList();
      this.monitoringFilesFilter = new RelPathList();
      return this._updateMonitoringFilesFilter();
    };

    Session.prototype.addPluginFolder = function(folder) {
      this.pluginManager.addFolder(folder);
      return this.queue.add({
        action: 'rescan-plugins'
      });
    };

    Session.prototype.addRuby = function(_arg) {
      var path, version;
      path = _arg.path, version = _arg.version;
      return this.rubies.push({
        path: path,
        version: version
      });
    };

    Session.prototype.setProjectsMemento = function(vfs, projectsMemento) {
      var newProjects, path, project, projectMemento, _i, _len, _ref1;
      this.projectsMemento = projectsMemento;
      if ((typeof this.projectsMemento === 'object') && !Array.isArray(this.projectsMemento)) {
        this.projectsMemento = (function() {
          var _ref1, _results;
          _ref1 = this.projectsMemento;
          _results = [];
          for (path in _ref1) {
            if (!__hasProp.call(_ref1, path)) continue;
            projectMemento = _ref1[path];
            projectMemento.path = path;
            _results.push(projectMemento);
          }
          return _results;
        }).call(this);
        debug("Session.setProjectsMemento: fixed up memento " + (JSON.stringify(this.projectsMemento, null, 2)));
      }
      newProjects = [];
      _ref1 = this.projectsMemento;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        projectMemento = _ref1[_i];
        project = this.findProjectByPath(projectMemento.path);
        if (!project) {
          project = this._addProject(this.universe.create(Project, {
            session: this,
            vfs: vfs,
            path: projectMemento.path
          }));
        }
        project.setMemento(projectMemento);
        newProjects.push(project);
      }
      this.projects = newProjects;
    };

    Session.prototype.makeProjectsMemento = function(callback) {
      var project;
      return callback(null, (function() {
        var _i, _len, _ref1, _results;
        _ref1 = this.projects;
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          project = _ref1[_i];
          _results.push(project.makeMemento());
        }
        return _results;
      }).call(this));
    };

    Session.prototype.findProjectById = function(projectId) {
      var project, _i, _len, _ref1;
      _ref1 = this.projects;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        project = _ref1[_i];
        if (project.id === projectId) {
          return project;
        }
      }
      return null;
    };

    Session.prototype.findProjectByPath = function(path) {
      var project, _i, _len, _ref1;
      _ref1 = this.projects;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        project = _ref1[_i];
        if (project.path === path) {
          return project;
        }
      }
      return null;
    };

    Session.prototype.findProjectByUrl = function(url) {
      var project, _i, _len, _ref1;
      _ref1 = this.projects;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        project = _ref1[_i];
        if (project.matchesUrl(url)) {
          return project;
        }
      }
      return null;
    };

    Session.prototype.findCompilerById = function(compilerId) {
      return {
        id: compilerId
      };
    };

    Session.prototype.addProject = function(vfs, path) {
      var project;
      project = this.universe.create(Project, {
        session: this,
        vfs: vfs,
        path: path
      });
      this._addProject(project);
      return project.setMemento({});
    };

    Session.prototype.startMonitoring = function() {
      var project, _i, _len, _ref1, _results;
      _ref1 = this.projects;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        project = _ref1[_i];
        _results.push(project.startMonitoring());
      }
      return _results;
    };

    Session.prototype.close = function() {
      var project, _i, _len, _ref1, _results;
      _ref1 = this.projects;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        project = _ref1[_i];
        _results.push(project.stopMonitoring());
      }
      return _results;
    };

    Session.prototype.addInterface = function(face) {
      this.on('command', (function(_this) {
        return function(message) {
          return face.send(message);
        };
      })(this));
      return face.on('command', (function(_this) {
        return function(connection, message) {
          return _this.execute(message, connection, function(err) {
            if (err) {
              return console.error(err.stack);
            }
          });
        };
      })(this));
    };

    Session.prototype.addPlugin = function(plugin) {
      if (typeof plugin.metadata !== 'object') {
        throw new Error("Missing plugin.metadata");
      }
      if (plugin.metadata.apiVersion !== 1) {
        throw new Error("Unsupported API version " + plugin.metadata.apiVersion + " requested by plugin " + plugin.metadata.name);
      }
      return this.plugins.push(plugin);
    };

    Session.prototype.after = function(func, description) {
      return this.queue.after((function(_this) {
        return function() {
          return process.nextTick(func);
        };
      })(this), description);
    };

    Session.prototype.handleExternalChange = function(vfs, root, paths) {
      var project, run, runs, _i, _len, _ref1;
      debug("Session.handleExternalChange root=%j; paths: %j", root, paths);
      runs = [];
      _ref1 = this.projects;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        project = _ref1[_i];
        if (run = project.handleExternalChange(vfs, root, paths)) {
          runs.push(run);
        }
      }
      return runs;
    };

    Session.prototype._addProject = function(project) {
      project.on('change', (function(_this) {
        return function(path) {
          return _this.emit('command', {
            command: 'reload',
            path: path
          });
        };
      })(this));
      project.on('action.start', (function(_this) {
        return function(action) {
          return _this.emit('action.start', project, action);
        };
      })(this));
      project.on('action.finish', (function(_this) {
        return function(action) {
          return _this.emit('action.finish', project, action);
        };
      })(this));
      project.on('run.start', (function(_this) {
        return function(run) {
          return _this.emit('run.start', project, run);
        };
      })(this));
      project.on('run.finish', (function(_this) {
        return function(run) {
          return _this.emit('run.finish', project, run);
        };
      })(this));
      this.projects.push(project);
      this.broadcastChange('projects');
      project.analyzer.addAnalyzerClass(require('./analyzers/compass'));
      project.analyzer.addAnalyzerClass(require('./analyzers/compilers'));
      project.analyzer.addAnalyzerClass(require('./analyzers/imports'));
      return project;
    };

    Session.prototype._removeProject = function(project) {
      var index;
      if ((index = this.projects.indexOf(project)) >= 0) {
        this.projects.splice(index, 1);
        this.broadcastChange('projects');
      }
      return void 0;
    };

    Session.prototype.execute = function(message, connection, callback) {
      var func;
      if (func = this["on " + message.command]) {
        return func.call(this, connection, message, callback);
      } else {
        debug("Ignoring unknown command " + message.command + ": " + (JSON.stringify(message)));
        return callback(null);
      }
    };

    Session.prototype['on save'] = function(connection, message, callback) {
      var project;
      debug("Got save command for URL " + message.url);
      project = this.findProjectByUrl(message.url);
      if (project) {
        debug("Save: project " + project.path + " matches URL " + message.url);
        return project.saveResourceFromWebInspector(message.url, message.content, callback);
      } else {
        debug("Save: no match for URL " + message.url);
        return callback(null);
      }
    };

    Session.prototype.sendBrowserCommand = function(command) {
      return this.emit('browser-command', command);
    };

    Session.prototype._rescanPlugins = function(request, done) {
      var compiler, err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "C:\\dev\\LiveReload\\node_modules\\livereload-core\\lib\\session.iced",
            funcname: "Session._rescanPlugins"
          });
          _this.pluginManager.rescan(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return err = arguments[0];
              };
            })(),
            lineno: 192
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          var _i, _len, _ref1;
          if (err) {
            return done(err);
          }
          _this._implicitMonitoringFilter = new RelPathList();
          _ref1 = _this.pluginManager.allCompilers;
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            compiler = _ref1[_i];
            _this._implicitMonitoringFilter.include(compiler.sourceFilter);
          }
          _this._updateMonitoringFilesFilter();
          return done();
        };
      })(this));
    };

    Session.prototype.setMonitoringFilter = function(filter) {
      this._customMonitoringFilter = filter;
      return this._updateMonitoringFilesFilter();
    };

    Session.prototype._updateMonitoringFilesFilter = function() {
      var project, _i, _len, _ref1, _results;
      this.monitoringFilesFilter.specs = [];
      this.monitoringFilesFilter.include(this._implicitMonitoringFilter);
      this.monitoringFilesFilter.include(this._customMonitoringFilter);
      debug("Updated monitoring filter (after including all compilable extensions): " + this.monitoringFilesFilter);
      _ref1 = this.projects;
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        project = _ref1[_i];
        _results.push(project.updateTree());
      }
      return _results;
    };

    Session.prototype.guessRootFromAbsolutePath = function(absPath) {
      var project, projectAbsPath, _i, _len, _ref1;
      absPath = PlaPath.normalize(absPath);
      _ref1 = this.projects;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        project = _ref1[_i];
        projectAbsPath = PlaPath.normalize(project.fullPath);
        if (PlaPath.isSubpath(absPath, projectAbsPath)) {
          return project.path;
        }
      }
    };

    return Session;

  })();

  module.exports = Session;

  Session.Session = Session;

  Session.R = require('newreactive');

  Session.Project = require('./projects/project');

  Session.Graph = require('./projects/graph');

  Session.MessageFormat = require('./messages/format');

  Session.MessageParser = require('./messages/parser');

  Session.Action = require('./rules/action');

  Session.CompilationAction = require('./rules/compilation-action');

  Session.RuleSet = require('./rules/ruleset');

  Session.CommandLineTool = require('./tools/cmdline');

}).call(this);
