// Generated by IcedCoffeeScript 1.8.0-d
(function() {
  var CompilerOptions, FileOptions, Path, Project, RegExp_escape, RelPathList, RelPathSpec, RuleSet, Rule_Project, Run, Url, abspath, debug, fsmonitor, iced, nextId, urlmatch, __iced_k, __iced_k_noop, _ref,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty;

  iced = {
    Deferrals: (function() {
      function _Class(_arg) {
        this.continuation = _arg;
        this.count = 1;
        this.ret = null;
      }

      _Class.prototype._fulfill = function() {
        if (!--this.count) {
          return this.continuation(this.ret);
        }
      };

      _Class.prototype.defer = function(defer_params) {
        ++this.count;
        return (function(_this) {
          return function() {
            var inner_params, _ref;
            inner_params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            if (defer_params != null) {
              if ((_ref = defer_params.assign_fn) != null) {
                _ref.apply(null, inner_params);
              }
            }
            return _this._fulfill();
          };
        })(this);
      };

      return _Class;

    })(),
    findDeferral: function() {
      return null;
    },
    trampoline: function(_fn) {
      return _fn();
    }
  };
  __iced_k = __iced_k_noop = function() {};

  debug = require('debug')('livereload:core:project');

  Path = require('path');

  Url = require('url');

  urlmatch = require('urlmatch');

  fsmonitor = require('fsmonitor');

  CompilerOptions = require('./compileropts');

  FileOptions = require('./fileopts');

  Run = require('../runs/run');

  RuleSet = require('../rules/ruleset');

  _ref = require('pathspec'), RelPathList = _ref.RelPathList, RelPathSpec = _ref.RelPathSpec;

  RegExp_escape = function(s) {
    return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
  };

  nextId = 1;

  abspath = function(path) {
    var home, m, other;
    if (path.charAt(0) === '~') {
      home = process.env.HOME;
      if (path.length === 1) {
        return home;
      } else if (path.charAt(1) === '/') {
        return Path.resolve(home, path.substr(2));
      } else if (m = path.match(/^~([^\/]+)\/(.*)$/)) {
        other = Path.join(Path.dirname(home), m[1]);
        return Path.resolve(other, m[2]);
      }
    } else {
      return Path.resolve(path);
    }
  };

  Rule_Project = (function() {
    function Rule_Project() {}

    Rule_Project.prototype.schema = {
      project: {
        type: Object
      }
    };

    Rule_Project.prototype['get files'] = function() {
      var path, _i, _len, _ref1, _results;
      _ref1 = this.project.tree.findMatchingPaths(this.action.compiler.sourceFilter);
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        path = _ref1[_i];
        _results.push(this.project.fileAt(path));
      }
      return _results;
    };

    return Rule_Project;

  })();

  Project = (function() {
    function Project() {}

    Project.prototype.schema = {
      compilationEnabled: {
        type: Boolean
      },
      disableLiveRefresh: {
        type: Boolean
      },
      enableRemoteWorkflow: {
        type: Boolean
      },
      fullPageReloadDelay: {
        type: Number
      },
      eventProcessingDelay: {
        type: Number
      },
      rubyVersionId: {
        type: String
      },
      excludedPaths: {
        type: {
          array: String
        }
      },
      urls: {
        type: {
          array: String
        }
      },
      customName: {
        type: String
      },
      nrPathCompsInName: {
        type: 'int'
      },
      snippet: {
        type: String,
        computed: true
      },
      availableCompilers: {
        type: Array,
        computed: true
      },
      fileOptionsByPath: {},
      compilableFilesFilter: {
        computed: true
      },
      _mixins: [[Project, [require('./project-actions')]], [require('../rules/rule').FileToFileRule, [Rule_Project]]]
    };

    Project.prototype.initialize = function(_arg) {
      var ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      this.session = _arg.session, this.vfs = _arg.vfs, this.path = _arg.path;
      this.name = Path.basename(this.path);
      this.id = "P" + (nextId++) + "_" + this.name;
      this.fullPath = abspath(this.path);
      this.analyzer = new (require('./analyzer'))(this);
      this.watcher = fsmonitor.watch(this.fullPath, this.session.monitoringFilesFilter, {
        mode: 'manual'
      });
      debug("Monitoring for changes: folder = %j", this.fullPath);
      this.watcher.on('change', (function(_this) {
        return function(change) {
          debug("Detected change:\n" + change);
          return _this.handleChange(_this.vfs, _this.fullPath, change.addedFiles.concat(change.modifiedFiles));
        };
      })(this));
      this.tree = this.watcher.tree;
      this.ruleSet = this.universe.create(RuleSet, {
        project: this
      });
      this.compilerOptionsById = {};
      this.fileOptionsByPath = {};
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "C:\\dev\\LiveReload\\node_modules\\livereload-core\\lib\\projects\\project.iced",
            funcname: "Project.initialize"
          });
          _this.watcher.on('complete', __iced_deferrals.defer({
            lineno: 103
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          debug("Tree scan complete for " + _this.fullPath);
          _this.analyzer.rebuild();
          console.error("Session: %s", _this.session.constructor.name);
          return _this.session.after(function() {
            debug("Analysis complete for " + _this.fullPath);
            _this.broadcastChange('fileOptionsByPath');
            return _this.emit('complete');
          }, "" + _this + ".initialize.complete");
        };
      })(this));
    };

    Project.prototype.destroy = function() {
      var _ref1;
      if ((_ref1 = this.watcher) != null) {
        _ref1.close();
      }
      this.stopMonitoring();
      return this.session._removeProject(this);
    };

    Project.prototype.updateTree = function() {
      return this.watcher.update();
    };

    Project.prototype._hostnameForUrl = function(url) {
      var components, e;
      try {
        components = Url.parse(url);
      } catch (_error) {
        e = _error;
        components = null;
      }
      if ((components != null ? components.protocol : void 0) === 'file:') {
        return null;
      } else {
        return (components != null ? components.hostname : void 0) || url.split('/')[0];
      }
    };

    Project.prototype.compute_snippet = function() {
      var checks, hostname, script, url;
      script = "document.write('<script src=\"http://' + (location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=2\"></' + 'script>')";
      if (this.urls.length > 0) {
        checks = (function() {
          var _i, _len, _ref1, _results;
          _ref1 = this.urls;
          _results = [];
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            url = _ref1[_i];
            if ((hostname = this._hostnameForUrl(url))) {
              _results.push("location.hostname === " + JSON.stringify(hostname));
            }
          }
          return _results;
        }).call(this);
        checks = checks.join(" || ");
        script = "if (" + checks + ") { " + script + " }";
      }
      return "<script>" + script + "</script>";
    };

    Project.prototype.compute_availableCompilers = function() {
      var _ref1;
      return ((_ref1 = this.session.pluginManager) != null ? _ref1.allCompilers : void 0) || [];
    };

    Project.prototype.compute_compilableFilesFilter = function() {
      var compiler, list, spec, _i, _j, _len, _len1, _ref1, _ref2;
      list = new RelPathList();
      _ref1 = this.availableCompilers;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        compiler = _ref1[_i];
        _ref2 = compiler.sourceSpecs;
        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
          spec = _ref2[_j];
          list.include(RelPathSpec.parseGitStyleSpec(spec));
        }
      }
      return list;
    };

    Project.prototype.setMemento = function(memento) {
      var compiler, compilerId, compilerOptionsMemento, fileMemento, fileOptionsMemento, filePath, i, o, plugin, step, _i, _j, _k, _len, _len1, _len2, _ref1, _ref10, _ref11, _ref12, _ref13, _ref14, _ref15, _ref16, _ref17, _ref18, _ref19, _ref2, _ref20, _ref21, _ref22, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9, _results;
      this.memento = memento;
      debug("Loading project at " + this.path + " with memento " + (JSON.stringify(this.memento, null, 2)));
      this.compilationEnabled = !!((_ref1 = (_ref2 = this.memento) != null ? _ref2.compilationEnabled : void 0) != null ? _ref1 : 0);
      this.disableLiveRefresh = !!((_ref3 = (_ref4 = this.memento) != null ? _ref4.disableLiveRefresh : void 0) != null ? _ref3 : 0);
      this.enableRemoteWorkflow = !!((_ref5 = (_ref6 = this.memento) != null ? _ref6.enableRemoteServerWorkflow : void 0) != null ? _ref5 : 0);
      this.fullPageReloadDelay = Math.floor(((_ref7 = (_ref8 = this.memento) != null ? _ref8.fullPageReloadDelay : void 0) != null ? _ref7 : 0.0) * 1000);
      this.eventProcessingDelay = Math.floor(((_ref9 = (_ref10 = this.memento) != null ? _ref10.eventProcessingDelay : void 0) != null ? _ref9 : 0.0) * 1000);
      this.rubyVersionId = ((_ref11 = this.memento) != null ? _ref11.rubyVersion : void 0) || 'system';
      this.excludedPaths = ((_ref12 = this.memento) != null ? _ref12.excludedPaths : void 0) || [];
      this.customName = ((_ref13 = this.memento) != null ? _ref13.customName : void 0) || '';
      this.nrPathCompsInName = ((_ref14 = this.memento) != null ? _ref14.numberOfPathComponentsToUseAsName : void 0) || 1;
      this.urls = ((_ref15 = this.memento) != null ? _ref15.urls : void 0) || [];
      _ref17 = ((_ref16 = this.memento) != null ? _ref16.compilers : void 0) || {};
      for (compilerId in _ref17) {
        if (!__hasProp.call(_ref17, compilerId)) continue;
        compilerOptionsMemento = _ref17[compilerId];
        if (compiler = this.session.findCompilerById(compilerId)) {
          this.compilerOptionsById[compilerId] = new CompilerOptions(compiler, compilerOptionsMemento);
          _ref18 = compilerOptionsMemento.files || {};
          for (filePath in _ref18) {
            if (!__hasProp.call(_ref18, filePath)) continue;
            fileOptionsMemento = _ref18[filePath];
            this.fileAt(filePath, true).setMemento(fileOptionsMemento);
          }
        }
      }
      _ref20 = ((_ref19 = this.memento) != null ? _ref19.files : void 0) || [];
      for (_i = 0, _len = _ref20.length; _i < _len; _i++) {
        fileMemento = _ref20[_i];
        debug("fileMemento: %j", fileMemento);
        this.fileAt(fileMemento.src, true).setMemento(fileMemento);
      }
      debug("@compilerOptionsById = " + JSON.stringify((function() {
        var _ref21, _results;
        _ref21 = this.compilerOptionsById;
        _results = [];
        for (i in _ref21) {
          o = _ref21[i];
          _results.push([i, o.options]);
        }
        return _results;
      }).call(this), null, 2));
      _ref21 = this.session.plugins;
      for (_j = 0, _len1 = _ref21.length; _j < _len1; _j++) {
        plugin = _ref21[_j];
        if (typeof plugin.loadProject === "function") {
          plugin.loadProject(this, this.memento);
        }
      }
      this.steps = [];
      _ref22 = this.session.plugins;
      _results = [];
      for (_k = 0, _len2 = _ref22.length; _k < _len2; _k++) {
        plugin = _ref22[_k];
        _results.push((function() {
          var _l, _len3, _ref23, _results1;
          _ref23 = (typeof plugin.createSteps === "function" ? plugin.createSteps(this) : void 0) || [];
          _results1 = [];
          for (_l = 0, _len3 = _ref23.length; _l < _len3; _l++) {
            step = _ref23[_l];
            step.initialize();
            _results1.push(this.steps.push(step));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    Project.prototype.makeMemento = function() {
      var file, _;
      return {
        path: this.path,
        urls: this.urls,
        compilationEnabled: !!this.compilationEnabled,
        disableLiveRefresh: !!this.disableLiveRefresh,
        files: (function() {
          var _ref1, _results;
          _ref1 = this.fileOptionsByPath;
          _results = [];
          for (_ in _ref1) {
            if (!__hasProp.call(_ref1, _)) continue;
            file = _ref1[_];
            if (file.compiler) {
              _results.push(file.makeMemento());
            }
          }
          return _results;
        }).call(this)
      };
    };

    Project.prototype.fileAt = function(relpath, create) {
      var _base;
      if (create == null) {
        create = false;
      }
      if (create) {
        return (_base = this.fileOptionsByPath)[relpath] || (_base[relpath] = this.universe.create(FileOptions, {
          project: this,
          path: relpath
        }));
      } else {
        return this.fileOptionsByPath[relpath];
      }
    };

    Project.prototype._updateFile = function(relpath, exists) {
      var file;
      file = this.fileAt(relpath, exists);
      if (file != null) {
        file.exists = exists;
      }
      return file;
    };

    Project.prototype.startMonitoring = function() {
      if (!this.monitor) {
        this.monitor = this.vfs.watch(this.path);
        return this.monitor.on('change', (function(_this) {
          return function(path) {
            return _this.emit('change', path);
          };
        })(this));
      }
    };

    Project.prototype.stopMonitoring = function() {
      var _ref1;
      if ((_ref1 = this.monitor) != null) {
        _ref1.close();
      }
      return this.monitor = null;
    };

    Project.prototype.matchesVFS = function(vfs) {
      return vfs === this.vfs;
    };

    Project.prototype.matchesPath = function(root, path) {
      var fullPath;
      if (root === '/') {
        fullPath = path;
      } else {
        fullPath = Path.join(root, path);
      }
      return this.vfs.isSubpath(this.fullPath, fullPath);
    };

    Project.prototype.filterPaths = function(root, paths) {
      var path, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = paths.length; _i < _len; _i++) {
        path = paths[_i];
        if (this.matchesPath(root, path)) {
          _results.push(path);
        }
      }
      return _results;
    };

    Project.prototype.matchesUrl = function(url) {
      var components;
      components = Url.parse(url);
      if (components.protocol === 'file:') {
        return components.pathname.substr(0, this.fullPath.length) === this.fullPath;
      }
      return this.urls.some(function(pattern) {
        return urlmatch(pattern, url);
      });
    };

    Project.prototype.handleExternalChange = function(vfs, root, paths) {
      if (!this.matchesVFS(vfs)) {
        return;
      }
      paths = this.filterPaths(root, paths);
      if (paths.length === 0) {
        return;
      }
      return this.watcher.update();
    };

    Project.prototype.handleChange = function(vfs, root, paths) {
      var change, path, run;
      if (!this.matchesVFS(vfs)) {
        return;
      }
      paths = this.filterPaths(root, paths);
      if (paths.length === 0) {
        return;
      }
      change = {
        paths: paths,
        reloadRequests: (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = paths.length; _i < _len; _i++) {
            path = paths[_i];
            _results.push({
              path: path,
              originalPath: null
            });
          }
          return _results;
        })()
      };
      run = new Run(this, change, this.steps);
      debug("Project.handleChange: created run for %j", paths);
      this.emit('run.start', run);
      this.analyzer.update(paths);
      this.session.queue.checkpoint((function(_this) {
        return function() {
          var pathsToProcess, sources, _i, _len;
          pathsToProcess = [];
          for (_i = 0, _len = paths.length; _i < _len; _i++) {
            path = paths[_i];
            if ((sources = _this.imports.findSources(path)) && (sources.length > 0) && ((sources.length !== 1) || (sources[0] !== path))) {
              debug("Will process " + (sources.join(', ')) + " instead of imported " + path);
              pathsToProcess.push.apply(pathsToProcess, sources);
            } else {
              pathsToProcess.push(path);
            }
          }
          change.paths = pathsToProcess;
          change.reloadRequests = (function() {
            var _j, _len1, _results;
            _results = [];
            for (_j = 0, _len1 = pathsToProcess.length; _j < _len1; _j++) {
              path = pathsToProcess[_j];
              _results.push({
                path: path,
                originalPath: null
              });
            }
            return _results;
          })();
          run.once('finish', function() {
            debug("Project.handleChange: finished run for %j", paths);
            _this.emit('run.finish', run);
            return _this.broadcastChange('fileOptionsByPath');
          });
          return run.start();
        };
      })(this), "" + this + ".handleChange.after.analyzer.update");
      return run;
    };

    Project.prototype.reportActionStart = function(action) {
      if (!action.id) {
        throw new Error("Invalid argument: action.id is required");
      }
      return this.emit('action.start', action);
    };

    Project.prototype.reportActionFinish = function(action) {
      if (!action.id) {
        throw new Error("Invalid argument: action.id is required");
      }
      return this.emit('action.finish', action);
    };

    Project.prototype.patchSourceFile = function(oldCompiled, newCompiled, callback) {
      var REPLACEMENT_RE, SELECTOR_RE, err, found, fullSrcPath, line, lineno, m, maxSuffixLen, minLen, newLen, newLine, newLines, newSelector, newSource, newValue, nm, oldLen, oldLine, oldLines, oldSelector, oldSource, oldValue, om, prefixLen, sourceRef, srcLines, srcResult, suffixLen, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      oldLines = oldCompiled.trim().split("\n");
      newLines = newCompiled.trim().split("\n");
      oldLen = oldLines.length;
      newLen = newLines.length;
      minLen = Math.min(oldLen, newLen);
      prefixLen = 0;
      while ((prefixLen < minLen) && (oldLines[prefixLen] === newLines[prefixLen])) {
        prefixLen++;
      }
      maxSuffixLen = minLen - prefixLen;
      suffixLen = 0;
      while ((suffixLen < maxSuffixLen) && (oldLines[oldLen - suffixLen - 1] === newLines[newLen - suffixLen - 1])) {
        suffixLen++;
      }
      if (minLen - prefixLen - suffixLen !== 1) {
        debug("Cannot patch source file: minLen = " + minLen + ", prefixLen = " + prefixLen + ", suffixLen = " + suffixLen);
        return callback(null);
      }
      oldLine = oldLines[prefixLen];
      newLine = newLines[prefixLen];
      debug("oldLine = %j", oldLine);
      debug("newLine = %j", newLine);
      SELECTOR_RE = /([\w-]+)\s*:(.*?)[;}]/;
      if (!((om = oldLine.match(SELECTOR_RE)) && (nm = newLine.match(SELECTOR_RE)))) {
        debug("Cannot match selector regexp");
        return callback(null);
      }
      oldSelector = om[1];
      oldValue = om[2].trim();
      newSelector = nm[1];
      newValue = nm[2].trim();
      debug("oldSelector = " + oldSelector + ", oldValue = '" + oldValue + "'");
      debug("newSelector = " + newSelector + ", newValue = '" + newValue + "'");
      if (oldSelector !== newSelector) {
        debug("Refusing to change oldSelector = " + oldSelector + " into newSelector = " + newSelector);
        return callback(null);
      }
      sourceRef = null;
      lineno = prefixLen - 1;
      while (lineno >= 0) {
        if (m = newLines[lineno].match(/\/\*\s*line\s+(\d+)\s*[,:](.*?)\*\//)) {
          sourceRef = {
            path: m[2].trim(),
            line: parseInt(m[1].trim(), 10)
          };
          break;
        }
        --lineno;
      }
      if (!sourceRef) {
        debug("patchSourceFile() cannot find source ref before line " + prefixLen);
        return callback(null);
      }
      debug("patchSourceFile() foudn source ref %j", sourceRef);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "C:\\dev\\LiveReload\\node_modules\\livereload-core\\lib\\projects\\project.iced",
            funcname: "Project.patchSourceFile"
          });
          _this.vfs.findFilesMatchingSuffixInSubtree(_this.path, sourceRef.path, null, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return srcResult = arguments[1];
              };
            })(),
            lineno: 369
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if (err) {
            debug("findFilesMatchingSuffixInSubtree() for src file '" + sourceRef.path + "' returned error: " + err.message);
            return callback(err);
          }
          if (!srcResult.bestMatch) {
            debug("findFilesMatchingSuffixInSubtree() for src file '" + sourceRef.path + "' found " + result.bestMatches.length + " matches.");
            return callback(null);
          }
          fullSrcPath = Path.join(_this.fullPath, srcResult.bestMatch.path);
          debug("findFilesMatchingSuffixInSubtree() for src file '" + sourceRef.path + "' found " + fullSrcPath);
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "C:\\dev\\LiveReload\\node_modules\\livereload-core\\lib\\projects\\project.iced",
              funcname: "Project.patchSourceFile"
            });
            _this.vfs.readFile(fullSrcPath, 'utf8', __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  err = arguments[0];
                  return oldSource = arguments[1];
                };
              })(),
              lineno: 381
            }));
            __iced_deferrals._fulfill();
          })(function() {
            if (err) {
              return callback(err);
            }
            REPLACEMENT_RE = RegExp("" + (RegExp_escape(oldSelector)) + "(\\s*(?::\\s*)?)" + (RegExp_escape(oldValue)));
            srcLines = oldSource.split("\n");
            debug("Got " + srcLines.length + " lines, looking starting from line " + (sourceRef.line - 1));
            lineno = sourceRef.line - 1;
            found = false;
            while (lineno < srcLines.length) {
              line = srcLines[lineno];
              debug("Considering line " + lineno + ": " + line);
              if (m = line.match(REPLACEMENT_RE)) {
                debug("Matched!");
                line = line.replace(REPLACEMENT_RE, function(_, sep) {
                  return "" + newSelector + sep + newValue;
                });
                srcLines[lineno] = line;
                found = true;
                break;
              }
              ++lineno;
            }
            if (!found) {
              debug("Nothing matched :-(");
              return callback(null);
            }
            newSource = srcLines.join("\n");
            debug("Saving patched source file...");
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "C:\\dev\\LiveReload\\node_modules\\livereload-core\\lib\\projects\\project.iced",
                funcname: "Project.patchSourceFile"
              });
              _this.vfs.writeFile(fullSrcPath, newSource, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return err = arguments[0];
                  };
                })(),
                lineno: 414
              }));
              __iced_deferrals._fulfill();
            })(function() {
              if (err) {
                return callback(err);
              }
              return callback(null);
            });
          });
        };
      })(this));
    };

    Project.prototype.saveResourceFromWebInspector = function(url, content, callback) {
      var components, err, fullPath, oldContent, result, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      components = Url.parse(url);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "C:\\dev\\LiveReload\\node_modules\\livereload-core\\lib\\projects\\project.iced",
            funcname: "Project.saveResourceFromWebInspector"
          });
          _this.vfs.findFilesMatchingSuffixInSubtree(_this.path, components.pathname, null, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return result = arguments[1];
              };
            })(),
            lineno: 424
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          if (err) {
            debug("findFilesMatchingSuffixInSubtree() returned error: " + err.message);
            return callback(err);
          }
          if (result.bestMatch) {
            debug("findFilesMatchingSuffixInSubtree() found '" + result.bestMatch.path + "'");
            fullPath = Path.join(_this.fullPath, result.bestMatch.path);
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "C:\\dev\\LiveReload\\node_modules\\livereload-core\\lib\\projects\\project.iced",
                funcname: "Project.saveResourceFromWebInspector"
              });
              _this.vfs.readFile(fullPath, 'utf8', __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    err = arguments[0];
                    return oldContent = arguments[1];
                  };
                })(),
                lineno: 433
              }));
              __iced_deferrals._fulfill();
            })(function() {
              if (err) {
                debug("Loading (pre-save) failed: " + err.message);
                return callback(err, false);
              }
              debug("Saving " + content.length + " characters into " + fullPath + "...");
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "C:\\dev\\LiveReload\\node_modules\\livereload-core\\lib\\projects\\project.iced",
                  funcname: "Project.saveResourceFromWebInspector"
                });
                _this.vfs.writeFile(fullPath, content, __iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      return err = arguments[0];
                    };
                  })(),
                  lineno: 439
                }));
                __iced_deferrals._fulfill();
              })(function() {
                if (err) {
                  debug("Saving failed: " + err.message);
                  return callback(err, false);
                }
                debug("Saving succeeded!");
                (function(__iced_k) {
                  if (oldContent.match(/\/\*\s*line\s+\d+\s*[,:](.*?)\*\//)) {
                    (function(__iced_k) {
                      __iced_deferrals = new iced.Deferrals(__iced_k, {
                        parent: ___iced_passed_deferral,
                        filename: "C:\\dev\\LiveReload\\node_modules\\livereload-core\\lib\\projects\\project.iced",
                        funcname: "Project.saveResourceFromWebInspector"
                      });
                      _this.patchSourceFile(oldContent, content, __iced_deferrals.defer({
                        assign_fn: (function() {
                          return function() {
                            return err = arguments[0];
                          };
                        })(),
                        lineno: 447
                      }));
                      __iced_deferrals._fulfill();
                    })(function() {
                      if (err) {
                        debug("patchSourceFile() failed: " + err.message);
                        return callback(err, true);
                      }
                      return __iced_k();
                    });
                  } else {
                    return __iced_k();
                  }
                })(function() {
                  return callback(null, true);
                  return __iced_k();
                });
              });
            });
          } else {
            debug("findFilesMatchingSuffixInSubtree() found " + result.bestMatches.length + " matches.");
            return callback(null, false);
            return __iced_k();
          }
        };
      })(this));
    };

    return Project;

  })();

  module.exports = Project;

}).call(this);
