// Generated by IcedCoffeeScript 1.8.0-d
(function() {
  var FileOptions, Path, decodeExternalRelativeDir, encodeExternalRelativeDir;

  Path = require('path');

  decodeExternalRelativeDir = function(dir) {
    switch (dir) {
      case '':
        return null;
      case '.':
        return '';
      default:
        return dir;
    }
  };

  encodeExternalRelativeDir = function(dir) {
    switch (dir) {
      case null:
        return '';
      case '':
        return '.';
      default:
        return dir;
    }
  };

  FileOptions = (function() {
    function FileOptions() {}

    FileOptions.prototype.schema = {
      project: {
        type: Object
      },
      path: {
        type: String
      },
      compiler: {
        type: Object
      },
      memento: {
        type: Object
      },
      compilable: {
        type: Boolean
      },
      compiled: {
        type: Boolean
      },
      initialized: {
        type: Boolean
      },
      enabled: {
        type: Boolean
      },
      outputNameMask: {
        type: String
      },
      outputDir: {
        type: String
      },
      relpath: {
        reactive: false
      },
      fullPath: {
        reactive: false
      },
      destDir: {
        reactive: false
      },
      fullDestDir: {
        reactive: false
      },
      destName: {
        reactive: false
      },
      destRelPath: {
        reactive: false
      },
      isImported: {
        reactive: false
      }
    };

    FileOptions.prototype.initialize = function(options) {
      var _ref;
      this.memento = options.memento || {};
      this.enabled = (_ref = this.memento.enabled) != null ? _ref : true;
      this.setMemento(this.memento);
      return Object.defineProperty(this, 'outputName', {
        get: (function(_this) {
          return function() {
            return _this.outputNameForMask(_this.outputNameMask);
          };
        })(this)
      });
    };

    FileOptions.prototype.get_relpath = function() {
      return this.path;
    };

    FileOptions.prototype.get_fullPath = function() {
      return Path.join(this.project.fullPath, this.path);
    };

    FileOptions.prototype.get_destDir = function() {
      return this.outputDir;
    };

    FileOptions.prototype.set_destDir = function(v) {
      return this.outputDir = v;
    };

    FileOptions.prototype.get_fullDestDir = function() {
      return Path.join(this.project.fullPath, this.destDir);
    };

    FileOptions.prototype.set_fullDestDir = function(v) {
      return this.destDir = Path.relative(this.project.fullPath, v);
    };

    FileOptions.prototype.get_destName = function() {
      return this.outputNameMask && this.outputNameForMask(this.outputNameMask) || "<none>";
    };

    FileOptions.prototype.get_destRelPath = function() {
      return Path.join(this.outputDir, this.outputNameMask && this.outputNameForMask(this.outputNameMask) || "<none>");
    };

    FileOptions.prototype.get_isImported = function() {
      return this.project.imports.hasIncomingEdges(this.path);
    };

    FileOptions.prototype.setMemento = function(memento) {
      var _ref, _ref1, _ref2;
      this.memento = memento;
      this.exists = (_ref = this.memento.exists) != null ? _ref : null;
      if (this.memento.dst) {
        this.outputDir = decodeExternalRelativeDir(Path.dirname(this.memento.dst));
        this.outputNameMask = Path.basename(this.memento.dst);
        if (this.outputNameMask === '<none>') {
          return this.outputNameMask = '';
        }
      } else {
        this.outputDir = decodeExternalRelativeDir((_ref1 = this.memento.output_dir) != null ? _ref1 : '');
        this.outputDir || (this.outputDir = (Path.dirname(this.path) === '.' ? '' : Path.dirname(this.path)));
        return this.outputNameMask = (_ref2 = this.memento.output_file) != null ? _ref2 : '';
      }
    };

    FileOptions.prototype.makeMemento = function() {
      var _ref;
      return {
        src: this.path,
        dst: Path.join(this.outputDir, this.outputNameMask || "<none>"),
        exists: (this.exists ? void 0 : false),
        compiler: ((_ref = this.compiler) != null ? _ref.id : void 0) || void 0
      };
    };

    FileOptions.prototype.outputNameForMask = function(mask) {
      var sourceBaseName;
      sourceBaseName = Path.basename(this.path, Path.extname(this.path));
      return mask.replace('*', sourceBaseName);
    };

    return FileOptions;

  })();

  module.exports = FileOptions;

}).call(this);
