// Generated by IcedCoffeeScript 1.8.0-d
(function() {
  var Array_uniq, Graph, Node;

  Array_uniq = function(array) {
    var index, item, _i, _len, _results;
    _results = [];
    for (index = _i = 0, _len = array.length; _i < _len; index = ++_i) {
      item = array[index];
      if (array.indexOf(item, index + 1) < 0) {
        _results.push(item);
      }
    }
    return _results;
  };

  module.exports = Graph = (function() {
    function Graph() {
      this.clear();
    }

    Graph.prototype.contents = function() {
      var nodeId;
      return ((function() {
        var _i, _len, _ref, _results;
        _ref = Object.keys(this._nodes).sort();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          nodeId = _ref[_i];
          if (this._nodes[nodeId].outgoingIds.length > 0) {
            _results.push(("" + nodeId + " -> ") + this._nodes[nodeId].outgoingIds.slice(0).sort().join(", "));
          }
        }
        return _results;
      }).call(this)).concat((function() {
        var _i, _len, _ref, _results;
        _ref = Object.keys(this._nodes).sort();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          nodeId = _ref[_i];
          if (this._nodes[nodeId].incomingIds.length > 0) {
            _results.push(("" + nodeId + " <- ") + this._nodes[nodeId].incomingIds.slice(0).sort().join(", "));
          }
        }
        return _results;
      }).call(this));
    };

    Graph.prototype.toString = function() {
      var c, l;
      if ((c = this.contents()).length > 0) {
        return "<\n" + ((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = c.length; _i < _len; _i++) {
            l = c[_i];
            _results.push("  " + l + "\n");
          }
          return _results;
        })()).join("") + ">\n";
      } else {
        return "<>\n";
      }
    };

    Graph.prototype.hasIncomingEdges = function(destinationId) {
      var node;
      return (node = this._nodes[destinationId]) && (node.incomingIds.length > 0);
    };

    Graph.prototype.getIncomingNodes = function(destinationId) {
      var node;
      if (node = this._nodes[destinationId]) {
        return node.incomingIds;
      } else {
        return [];
      }
    };

    Graph.prototype.findSources = function(destinationId) {
      return this._findSourcesDFS(destinationId, [], {});
    };

    Graph.prototype._findSourcesDFS = function(nodeId, result, visited) {
      var node, sourceId, _i, _len, _ref;
      visited[nodeId] = true;
      if (node = this._nodes[nodeId]) {
        if (node.incomingIds.length === 0) {
          result.push(nodeId);
        } else {
          _ref = node.incomingIds;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            sourceId = _ref[_i];
            if (!visited[sourceId]) {
              this._findSourcesDFS(sourceId, result, visited);
            }
          }
        }
      }
      return result;
    };

    Graph.prototype.clear = function() {
      return this._nodes = {};
    };

    Graph.prototype.updateOutgoing = function(sourceId, newDestinationIds) {
      var destinationId, index, node, _i, _j, _len, _len1, _ref;
      node = this._lookup(sourceId);
      _ref = node.outgoingIds.slice(0);
      for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
        destinationId = _ref[index];
        if (newDestinationIds.indexOf(destinationId) < 0) {
          node.removeOutgoing(destinationId);
          this._removeIncomingEdge(sourceId, destinationId);
        }
      }
      for (_j = 0, _len1 = newDestinationIds.length; _j < _len1; _j++) {
        destinationId = newDestinationIds[_j];
        if (node.outgoingIds.indexOf(destinationId) < 0) {
          node.outgoingIds.push(destinationId);
          this._lookup(destinationId).addIncoming(sourceId);
        }
      }
      return void 0;
    };

    Graph.prototype.remove = function(nodeId) {
      var destinationId, node, sourceId, _i, _j, _len, _len1, _ref, _ref1;
      if (node = this._nodes[nodeId]) {
        _ref = node.incomingIds;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          sourceId = _ref[_i];
          this._removeOutgoingEdge(sourceId, nodeId);
        }
        _ref1 = node.outgoingIds;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          destinationId = _ref1[_j];
          this._removeIncomingEdge(nodeId, destinationId);
        }
        delete this._nodes[nodeId];
      }
      return void 0;
    };

    Graph.prototype._removeIncomingEdge = function(sourceId, destinationId) {
      var node;
      if (node = this._nodes[destinationId]) {
        node.removeIncoming(sourceId);
        if (node.isEmpty()) {
          delete this._nodes[destinationId];
        }
      }
      return void 0;
    };

    Graph.prototype._removeOutgoingEdge = function(sourceId, destinationId) {
      var node;
      if (node = this._nodes[sourceId]) {
        node.removeOutgoing(destinationId);
        if (node.isEmpty()) {
          delete this._nodes[sourceId];
        }
      }
      return void 0;
    };

    Graph.prototype._lookup = function(nodeId) {
      var _base;
      return (_base = this._nodes)[nodeId] || (_base[nodeId] = new Node(nodeId));
    };

    return Graph;

  })();

  Node = (function() {
    function Node(id) {
      this.id = id;
      this.incomingIds = [];
      this.outgoingIds = [];
    }

    Node.prototype.addIncoming = function(sourceId) {
      var index;
      if ((index = this.incomingIds.indexOf(sourceId)) < 0) {
        this.incomingIds.push(sourceId);
      }
      return void 0;
    };

    Node.prototype.addOutgoing = function(destinationId) {
      var index;
      if ((index = this.outgoingIds.indexOf(destinationId)) < 0) {
        this.outgoingIds.push(destinationId);
      }
      return void 0;
    };

    Node.prototype.removeIncoming = function(sourceId) {
      var index;
      if ((index = this.incomingIds.indexOf(sourceId)) >= 0) {
        this.incomingIds.splice(index, 1);
      }
      return void 0;
    };

    Node.prototype.removeOutgoing = function(destinationId) {
      var index;
      if ((index = this.outgoingIds.indexOf(destinationId)) >= 0) {
        this.outgoingIds.splice(index, 1);
      }
      return void 0;
    };

    Node.prototype.isEmpty = function() {
      return (this.incomingIds.length === 0) && (this.outgoingIds.length === 0);
    };

    return Node;

  })();

}).call(this);
