// Generated by IcedCoffeeScript 1.8.0-d
(function() {
  var Analyzer, Path, debug, fs, iced, __iced_k, __iced_k_noop,
    __slice = [].slice;

  iced = {
    Deferrals: (function() {
      function _Class(_arg) {
        this.continuation = _arg;
        this.count = 1;
        this.ret = null;
      }

      _Class.prototype._fulfill = function() {
        if (!--this.count) {
          return this.continuation(this.ret);
        }
      };

      _Class.prototype.defer = function(defer_params) {
        ++this.count;
        return (function(_this) {
          return function() {
            var inner_params, _ref;
            inner_params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            if (defer_params != null) {
              if ((_ref = defer_params.assign_fn) != null) {
                _ref.apply(null, inner_params);
              }
            }
            return _this._fulfill();
          };
        })(this);
      };

      return _Class;

    })(),
    findDeferral: function() {
      return null;
    },
    trampoline: function(_fn) {
      return _fn();
    }
  };
  __iced_k = __iced_k_noop = function() {};

  debug = require('debug')('livereload:core:analyzer');

  fs = require('fs');

  Path = require('path');

  module.exports = Analyzer = (function() {
    function Analyzer(project) {
      this.project = project;
      this.session = this.project.session;
      this.queue = this.session.queue;
      this.queue.register({
        project: this.project.id,
        action: 'analyzer-rebuild'
      }, {
        idKeys: ['project', 'action']
      }, this._rebuild.bind(this));
      this.queue.register({
        project: this.project.id,
        action: 'analyzer-update'
      }, {
        idKeys: ['project', 'action']
      }, this._update.bind(this));
      this.analyzers = [];
      this._fullRebuildRequired = true;
    }

    Analyzer.prototype.addAnalyzerClass = function(analyzerClass) {
      var analyzer;
      analyzer = new analyzerClass(this.project);
      this.analyzers.push(analyzer);
      return this.rebuild();
    };

    Analyzer.prototype.rebuild = function() {
      return this.queue.add({
        project: this.project.id,
        action: 'analyzer-rebuild'
      });
    };

    Analyzer.prototype._rebuild = function(request, done) {
      var analyzer, file, relpath, relpaths, ___iced_passed_deferral, __iced_deferrals, __iced_k, _i, _len;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      relpaths = this.project.tree.allFiles;
      debug(("Analyzer found " + relpaths.length + " paths: ") + relpaths.join(", "));
      for (_i = 0, _len = relpaths.length; _i < _len; _i++) {
        relpath = relpaths[_i];
        this.project._updateFile(relpath, true);
      }
      (function(_this) {
        return (function(__iced_k) {
          var _j, _len1, _ref, _results, _while;
          _ref = _this.analyzers;
          _len1 = _ref.length;
          _j = 0;
          _results = [];
          _while = function(__iced_k) {
            var _break, _continue, _next;
            _break = function() {
              return __iced_k(_results);
            };
            _continue = function() {
              return iced.trampoline(function() {
                ++_j;
                return _while(__iced_k);
              });
            };
            _next = function(__iced_next_arg) {
              _results.push(__iced_next_arg);
              return _continue();
            };
            if (!(_j < _len1)) {
              return _break();
            } else {
              analyzer = _ref[_j];
              debug("Running analyzer " + analyzer);
              analyzer.clear();
              relpaths = _this.project.tree.findMatchingPaths(analyzer.list);
              debug(("" + analyzer + " full rebuild will process " + relpaths.length + " paths: ") + relpaths.join(", "));
              (function(__iced_k) {
                var _k, _len2, _ref1, _results1, _while;
                _ref1 = relpaths;
                _len2 = _ref1.length;
                _k = 0;
                _results1 = [];
                _while = function(__iced_k) {
                  var _break, _continue, _next;
                  _break = function() {
                    return __iced_k(_results1);
                  };
                  _continue = function() {
                    return iced.trampoline(function() {
                      ++_k;
                      return _while(__iced_k);
                    });
                  };
                  _next = function(__iced_next_arg) {
                    _results1.push(__iced_next_arg);
                    return _continue();
                  };
                  if (!(_k < _len2)) {
                    return _break();
                  } else {
                    relpath = _ref1[_k];
                    (function(__iced_k) {
                      if (file = _this.project.fileAt(relpath)) {
                        (function(__iced_k) {
                          __iced_deferrals = new iced.Deferrals(__iced_k, {
                            parent: ___iced_passed_deferral,
                            filename: "C:\\dev\\LiveReload\\node_modules\\livereload-core\\lib\\projects\\analyzer.iced",
                            funcname: "Analyzer._rebuild"
                          });
                          setImmediate(__iced_deferrals.defer({
                            lineno: 42
                          }));
                          __iced_deferrals._fulfill();
                        })(function() {
                          (function(__iced_k) {
                            __iced_deferrals = new iced.Deferrals(__iced_k, {
                              parent: ___iced_passed_deferral,
                              filename: "C:\\dev\\LiveReload\\node_modules\\livereload-core\\lib\\projects\\analyzer.iced",
                              funcname: "Analyzer._rebuild"
                            });
                            _this._updateFile(analyzer, file, __iced_deferrals.defer({
                              lineno: 43
                            }));
                            __iced_deferrals._fulfill();
                          })(__iced_k);
                        });
                      } else {
                        return __iced_k();
                      }
                    })(_next);
                  }
                };
                _while(__iced_k);
              })(_next);
            }
          };
          _while(__iced_k);
        });
      })(this)((function(_this) {
        return function() {
          _this._fullRebuildRequired = false;
          return done();
        };
      })(this));
    };

    Analyzer.prototype.update = function(relpaths) {
      if (this._fullRebuildRequired) {
        return this.rebuild();
      }
      return this.queue.add({
        project: this.project.id,
        action: 'analyzer-update',
        relpaths: relpaths.slice(0)
      });
    };

    Analyzer.prototype._update = function(request, done) {
      var analyzer, exists, file, files, fullPath, relpath, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      debug("Analyzer update job running.");
      files = [];
      (function(_this) {
        return (function(__iced_k) {
          var _i, _len, _ref, _results, _while;
          _ref = request.relpaths;
          _len = _ref.length;
          _i = 0;
          _results = [];
          _while = function(__iced_k) {
            var _break, _continue, _next;
            _break = function() {
              return __iced_k(_results);
            };
            _continue = function() {
              return iced.trampoline(function() {
                ++_i;
                return _while(__iced_k);
              });
            };
            _next = function(__iced_next_arg) {
              _results.push(__iced_next_arg);
              return _continue();
            };
            if (!(_i < _len)) {
              return _break();
            } else {
              relpath = _ref[_i];
              fullPath = Path.join(_this.project.fullPath, relpath);
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "C:\\dev\\LiveReload\\node_modules\\livereload-core\\lib\\projects\\analyzer.iced",
                  funcname: "Analyzer._update"
                });
                fs.exists(fullPath, __iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      return exists = arguments[0];
                    };
                  })(),
                  lineno: 58
                }));
                __iced_deferrals._fulfill();
              })(function() {
                debug("file at " + relpath + " " + (exists && 'exists' || 'does not exist.'));
                return _next((file = _this.project._updateFile(relpath, exists)) ? files.push(file) : void 0);
              });
            }
          };
          _while(__iced_k);
        });
      })(this)((function(_this) {
        return function() {
          (function(__iced_k) {
            var _i, _len, _ref, _results, _while;
            _ref = files;
            _len = _ref.length;
            _i = 0;
            _results = [];
            _while = function(__iced_k) {
              var _break, _continue, _next;
              _break = function() {
                return __iced_k(_results);
              };
              _continue = function() {
                return iced.trampoline(function() {
                  ++_i;
                  return _while(__iced_k);
                });
              };
              _next = function(__iced_next_arg) {
                _results.push(__iced_next_arg);
                return _continue();
              };
              if (!(_i < _len)) {
                return _break();
              } else {
                file = _ref[_i];
                (function(__iced_k) {
                  var _j, _len1, _ref1, _results1, _while;
                  _ref1 = _this.analyzers;
                  _len1 = _ref1.length;
                  _j = 0;
                  _results1 = [];
                  _while = function(__iced_k) {
                    var _break, _continue, _next;
                    _break = function() {
                      return __iced_k(_results1);
                    };
                    _continue = function() {
                      return iced.trampoline(function() {
                        ++_j;
                        return _while(__iced_k);
                      });
                    };
                    _next = function(__iced_next_arg) {
                      _results1.push(__iced_next_arg);
                      return _continue();
                    };
                    if (!(_j < _len1)) {
                      return _break();
                    } else {
                      analyzer = _ref1[_j];
                      (function(__iced_k) {
                        if (analyzer.list.matches(file.relpath)) {
                          (function(__iced_k) {
                            __iced_deferrals = new iced.Deferrals(__iced_k, {
                              parent: ___iced_passed_deferral,
                              filename: "C:\\dev\\LiveReload\\node_modules\\livereload-core\\lib\\projects\\analyzer.iced",
                              funcname: "Analyzer._update"
                            });
                            setImmediate(__iced_deferrals.defer({
                              lineno: 67
                            }));
                            __iced_deferrals._fulfill();
                          })(function() {
                            (function(__iced_k) {
                              __iced_deferrals = new iced.Deferrals(__iced_k, {
                                parent: ___iced_passed_deferral,
                                filename: "C:\\dev\\LiveReload\\node_modules\\livereload-core\\lib\\projects\\analyzer.iced",
                                funcname: "Analyzer._update"
                              });
                              _this._updateFile(analyzer, file, __iced_deferrals.defer({
                                lineno: 68
                              }));
                              __iced_deferrals._fulfill();
                            })(__iced_k);
                          });
                        } else {
                          return __iced_k(debug("" + analyzer + " not interested in " + file.relpath));
                        }
                      })(_next);
                    }
                  };
                  _while(__iced_k);
                })(_next);
              }
            };
            _while(__iced_k);
          })(function() {
            (function(__iced_k) {
              var _i, _len, _ref, _results, _while;
              _ref = _this.analyzers;
              _len = _ref.length;
              _i = 0;
              _results = [];
              _while = function(__iced_k) {
                var _break, _continue, _next;
                _break = function() {
                  return __iced_k(_results);
                };
                _continue = function() {
                  return iced.trampoline(function() {
                    ++_i;
                    return _while(__iced_k);
                  });
                };
                _next = function(__iced_next_arg) {
                  _results.push(__iced_next_arg);
                  return _continue();
                };
                if (!(_i < _len)) {
                  return _break();
                } else {
                  analyzer = _ref[_i];
                  debug("Calling " + analyzer + ".after");
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "C:\\dev\\LiveReload\\node_modules\\livereload-core\\lib\\projects\\analyzer.iced",
                      funcname: "Analyzer._update"
                    });
                    analyzer.after(__iced_deferrals.defer({
                      lineno: 74
                    }));
                    __iced_deferrals._fulfill();
                  })(_next);
                }
              };
              _while(__iced_k);
            })(function() {
              return done();
            });
          });
        };
      })(this));
    };

    Analyzer.prototype._updateFile = function(analyzer, file, callback) {
      var action, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      if (!file.exists) {
        debug("" + analyzer + ": deleting info on " + file.relpath);
        analyzer.removed(file.relpath);
        return callback();
      }
      debug("" + analyzer + ": analyzing " + file.relpath);
      action = {
        id: 'analyze',
        message: "Analyzing " + (Path.basename(file.relpath))
      };
      this.project.reportActionStart(action);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "C:\\dev\\LiveReload\\node_modules\\livereload-core\\lib\\projects\\analyzer.iced",
            funcname: "Analyzer._updateFile"
          });
          analyzer.update(file, __iced_deferrals.defer({
            lineno: 87
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          _this.project.reportActionFinish(action);
          return callback();
        };
      })(this));
    };

    return Analyzer;

  })();

}).call(this);
