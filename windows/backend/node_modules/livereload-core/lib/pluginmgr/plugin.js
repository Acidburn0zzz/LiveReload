// Generated by IcedCoffeeScript 1.8.0-d
(function() {
  var CommandLineTool, Compiler, MessageParser, Path, Plugin, PluginManager, RelPathList, RelPathSpec, debug, fs, iced, loadPlugin, util, _, __iced_k, __iced_k_noop, _ref,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty;

  iced = {
    Deferrals: (function() {
      function _Class(_arg) {
        this.continuation = _arg;
        this.count = 1;
        this.ret = null;
      }

      _Class.prototype._fulfill = function() {
        if (!--this.count) {
          return this.continuation(this.ret);
        }
      };

      _Class.prototype.defer = function(defer_params) {
        ++this.count;
        return (function(_this) {
          return function() {
            var inner_params, _ref;
            inner_params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            if (defer_params != null) {
              if ((_ref = defer_params.assign_fn) != null) {
                _ref.apply(null, inner_params);
              }
            }
            return _this._fulfill();
          };
        })(this);
      };

      return _Class;

    })(),
    findDeferral: function() {
      return null;
    },
    trampoline: function(_fn) {
      return _fn();
    }
  };
  __iced_k = __iced_k_noop = function() {};

  debug = require('debug')('livereload:core:plugins');

  fs = require('fs');

  Path = require('path');

  util = require('util');

  _ = require('underscore');

  CommandLineTool = require('../tools/cmdline');

  MessageParser = require('../messages/parser');

  _ref = require('pathspec'), RelPathList = _ref.RelPathList, RelPathSpec = _ref.RelPathSpec;

  Compiler = (function() {
    function Compiler(plugin, manifest) {
      var ext, re, spec, _i, _len, _ref1;
      this.plugin = plugin;
      this.manifest = manifest;
      this.name = this.manifest.Name;
      this.id = this.name.toLowerCase();
      this.extensions = this.manifest.Extensions || [];
      this.destinationExt = this.manifest.DestinationExtension || '';
      this.sourceSpecs = (function() {
        var _i, _len, _ref1, _results;
        _ref1 = this.extensions;
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          ext = _ref1[_i];
          _results.push("*." + ext);
        }
        return _results;
      }).call(this);
      this.tool = new CommandLineTool({
        name: this.name,
        args: this.manifest.CommandLine,
        cwd: this.manifest.RunIn || "$(project_dir)",
        parser: new MessageParser({
          errors: this.manifest.Errors || [],
          warnings: this.manifest.Warnings || []
        }),
        info: {
          '$(plugin)': this.plugin.folder
        }
      });
      this.importRegExps = (function() {
        var _i, _len, _ref1, _results;
        _ref1 = this.manifest.ImportRegExps || [];
        _results = [];
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          re = _ref1[_i];
          _results.push(new RegExp(re));
        }
        return _results;
      }).call(this);
      this.sourceFilter = new RelPathList();
      _ref1 = this.sourceSpecs;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        spec = _ref1[_i];
        this.sourceFilter.include(RelPathSpec.parseGitStyleSpec(spec));
      }
    }

    return Compiler;

  })();

  exports.Compiler = Compiler;

  Plugin = (function() {
    function Plugin(folder) {
      this.folder = folder;
    }

    Plugin.prototype.initialize = function(callback) {
      this.compilers = {};
      this.manifestFile = "" + this.folder + "/manifest.json";
      return this.parseManifest(callback);
    };

    Plugin.prototype.parseManifest = function(callback) {
      var e;
      try {
        return this.processManifest(JSON.parse(fs.readFileSync(this.manifestFile, 'utf8')), callback);
      } catch (_error) {
        e = _error;
        debug("Error parsing manifest " + this.manifestFile + ": " + e.stack);
        return callback(e);
      }
    };

    Plugin.prototype.processManifest = function(manifest, callback) {
      var compiler, compilerManifest, _i, _len, _ref1;
      this.manifest = manifest;
      _ref1 = this.manifest.LRCompilers;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        compilerManifest = _ref1[_i];
        compiler = new Compiler(this, compilerManifest);
        this.compilers[compiler.id] = compiler;
      }
      debug("Loaded manifest at " + this.folder + " with " + this.manifest.LRCompilers.length + " compilers");
      return callback(null);
    };

    return Plugin;

  })();

  loadPlugin = function(folder, callback) {
    var plugin;
    plugin = new Plugin(folder);
    return plugin.initialize(function(err) {
      if (err) {
        return callback(err);
      }
      return callback(null, plugin);
    });
  };

  PluginManager = (function() {
    function PluginManager() {
      this.folders = [];
    }

    PluginManager.prototype.addFolder = function(folder) {
      return this.folders.push(folder);
    };

    PluginManager.prototype.rescan = function(callback) {
      var compiler, entry, err, errs, folder, i, id, plugin, pluginFolders, result, ___iced_passed_deferral, __iced_deferrals, __iced_k, _i, _j, _len, _len1, _ref1, _ref2;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      pluginFolders = [];
      _ref1 = this.folders;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        folder = _ref1[_i];
        debug("Scanning plugin folder: " + (JSON.stringify(folder)));
        _ref2 = fs.readdirSync(folder);
        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
          entry = _ref2[_j];
          if (entry.match(/\.lrplugin$/)) {
            pluginFolders.push(Path.join(folder, entry));
          }
        }
      }
      errs = {};
      result = [];
      (function(_this) {
        return (function(__iced_k) {
          var _k, _len2;
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "C:\\dev\\LiveReload\\node_modules\\livereload-core\\lib\\pluginmgr\\plugin.iced",
            funcname: "PluginManager.rescan"
          });
          for (i = _k = 0, _len2 = pluginFolders.length; _k < _len2; i = ++_k) {
            folder = pluginFolders[i];
            loadPlugin(folder, __iced_deferrals.defer({
              assign_fn: (function(__slot_1, __slot_2, __slot_3, __slot_4) {
                return function() {
                  __slot_1[__slot_2] = arguments[0];
                  return __slot_3[__slot_4] = arguments[1];
                };
              })(errs, folder, result, i),
              lineno: 90
            }));
          }
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          var _k, _len2, _ref3;
          for (folder in errs) {
            if (!__hasProp.call(errs, folder)) continue;
            err = errs[folder];
            if (!(err)) {
              continue;
            }
            err.message = "Error loading plugin from " + folder + ": " + err.message;
            return callback(err);
          }
          _this.plugins = result;
          _this.compilers = {};
          _ref3 = _this.plugins;
          for (_k = 0, _len2 = _ref3.length; _k < _len2; _k++) {
            plugin = _ref3[_k];
            _.extend(_this.compilers, plugin.compilers);
          }
          _this.allCompilers = (function() {
            var _ref4, _results;
            _ref4 = this.compilers;
            _results = [];
            for (id in _ref4) {
              if (!__hasProp.call(_ref4, id)) continue;
              compiler = _ref4[id];
              _results.push(compiler);
            }
            return _results;
          }).call(_this);
          return callback(null);
        };
      })(this));
    };

    return PluginManager;

  })();

  exports.PluginManager = PluginManager;

  exports.Plugin = Plugin;

}).call(this);
