// Generated by IcedCoffeeScript 1.8.0-d
(function() {
  var AppVFS, LRWebSocketController, Path, debug, iced, __iced_k, __iced_k_noop,
    __slice = [].slice;

  iced = {
    Deferrals: (function() {
      function _Class(_arg) {
        this.continuation = _arg;
        this.count = 1;
        this.ret = null;
      }

      _Class.prototype._fulfill = function() {
        if (!--this.count) {
          return this.continuation(this.ret);
        }
      };

      _Class.prototype.defer = function(defer_params) {
        ++this.count;
        return (function(_this) {
          return function() {
            var inner_params, _ref;
            inner_params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            if (defer_params != null) {
              if ((_ref = defer_params.assign_fn) != null) {
                _ref.apply(null, inner_params);
              }
            }
            return _this._fulfill();
          };
        })(this);
      };

      return _Class;

    })(),
    findDeferral: function() {
      return null;
    },
    trampoline: function(_fn) {
      return _fn();
    }
  };
  __iced_k = __iced_k_noop = function() {};

  debug = require('debug')('livereload:cli:rpc');

  Path = require('path');

  if (process.platform === 'win32') {
    AppVFS = require('vfs-local').LocalVFS;
  } else {
    AppVFS = require('../lib/vfs-app');
  }

  LRWebSocketController = require('../lib/network/controller');

  exports.api = {
    init: function(_arg, callback) {
      var appDataDir, build, context, err, logDir, logFile, platform, resourcesDir, rubies, ruby, version, ___iced_passed_deferral, __iced_deferrals, __iced_k;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      resourcesDir = _arg.resourcesDir, appDataDir = _arg.appDataDir, logDir = _arg.logDir, logFile = _arg.logFile, rubies = _arg.rubies, version = _arg.version, build = _arg.build, platform = _arg.platform;
      if (!resourcesDir) {
        return callback(new Error("init requires resourcesDir"));
      }
      if (!appDataDir) {
        return callback(new Error("init requires appDataDir"));
      }
      if (!logDir) {
        return callback(new Error("init requires logDir"));
      }
      debug("Initializing LiveReload backend with folders: " + JSON.stringify({
        resourcesDir: resourcesDir,
        appDataDir: appDataDir,
        logDir: logDir,
        logFile: logFile,
        version: version,
        build: build,
        platform: platform
      }));
      LR.version = version || '0.0.0';
      context = this;
      context.setupRuntime({
        version: version,
        appDataDir: appDataDir
      });
      context.websockets = new LRWebSocketController(this);
      (function(_this) {
        return (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "C:\\dev\\LiveReload\\node_modules\\livereload\\rpc-api\\app.iced"
          });
          context.websockets.init(__iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return err = arguments[0];
              };
            })(),
            lineno: 24
          }));
          __iced_deferrals._fulfill();
        });
      })(this)((function(_this) {
        return function() {
          var _i, _len, _ref;
          if (err) {
            LR.client.app.failedToStart({
              message: "" + err.message
            });
            LR.rpc.exit(1);
            return callback(null);
          }
          context.stats.startup();
          _ref = rubies || [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            ruby = _ref[_i];
            _this.session.addRuby(ruby);
          }
          _this.appVfs = new AppVFS(LR.client);
          LR.client.app.requestModel({});
          LR.projects.init(_this.appVfs, _this.session, appDataDir);
          debug("Backend is up and running.");
          return callback();
        };
      })(this));
    },
    ping: function(arg, callback) {
      return callback();
    },
    reloadLegacyProjects: function(memento, callback) {
      this.session.setProjectsMemento(this.appVfs, memento);
      return callback();
    },
    handleChange: function(_arg, callback) {
      var paths, root;
      root = _arg.root, paths = _arg.paths;
      this.session.handleChange(this.appVfs, root, paths);
      return callback(null);
    }
  };

  exports.displayCriticalError = function(_arg) {
    var button, text, title, url;
    title = _arg.title, text = _arg.text, url = _arg.url, button = _arg.button;
    if (button == null) {
      button = "More Info";
    }
    if (process.platform === 'win32') {
      LR.rpc.send('app.displayCriticalError', {
        title: title,
        text: text,
        url: url,
        button: button
      });
      return;
    }
    debug("ERROR (displayCriticalError): " + title + " -- " + text);
    return LR.client.app.displayPopupMessage({
      title: title,
      text: text,
      buttons: [['help', button], ['quit', "Quit"]]
    }, function(err, result) {
      if (result === 'help') {
        LR.client.app.openUrl(url);
      }
      return LR.client.app.terminate();
    });
  };

  exports.displayHelpfulWarning = function(_arg) {
    var button, text, title, url;
    title = _arg.title, text = _arg.text, url = _arg.url, button = _arg.button;
    if (button == null) {
      button = "More Info";
    }
    debug("Warning (displayHelpfulWarning): " + title + " -- " + text);
    return LR.client.app.displayPopupMessage({
      title: title,
      text: text,
      buttons: [['help', button], ['ignore', "Ignore"]]
    }, function(err, result) {
      if (result === 'help') {
        return LR.client.app.openUrl(url);
      }
    });
  };

}).call(this);
