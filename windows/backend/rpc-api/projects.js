// Generated by IcedCoffeeScript 1.8.0-d
(function() {
  var Path, R, UPDATE, debug, fs, n, updateStatus, _, _customStatus, _dataFile, _session, _stats, _vfs,
    __slice = [].slice;

  debug = require('debug')('livereload:cli');

  Path = require('path');

  fs = require('fs');

  _ = require('underscore');

  R = require('livereload-core').R;

  _session = null;

  _vfs = null;

  _dataFile = null;

  _stats = {
    connectionCount: 0,
    changes: 0,
    compilations: 0,
    refreshes: 0
  };

  _customStatus = '';

  n = function() {
    var number, string, strings, variant;
    number = arguments[0], strings = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    variant = (number === 1 ? 0 : 1);
    string = strings[variant];
    return string.replace('#', number);
  };

  updateStatus = function() {
    var status;
    status = _customStatus || ("Idle. " + (n(_stats.connectionCount, '1 browser connected', '# browsers connected')) + ". " + (n(_stats.changes, '1 change', '# changes')) + ", " + (n(_stats.compilations, '1 file compiled', '# files compiled')) + ", " + (n(_stats.refreshes, '1 refresh', '# refreshes')) + " so far.");
    return UPDATE({
      '#app': {
        status: status
      }
    });
  };

  UPDATE = function(payload, callback) {
    return LR.rpc.send('rpc', payload, callback);
  };

  exports.preinit = function(universe) {};

  exports.init = function(vfs, session, appDataDir) {
    var data, e, statusClearingTimeout;
    _vfs = vfs;
    _session = session;
    _dataFile = Path.join(appDataDir, 'projects.json');
    session.on('run.start', (function(_this) {
      return function(project, run) {
        _stats.changes += run.change.paths.length;
        return updateStatus();
      };
    })(this));
    session.on('run.finish', (function(_this) {
      return function(project, run) {
        LR.client.projects.notifyChanged({});
        _customStatus = '';
        return updateStatus();
      };
    })(this));
    statusClearingTimeout = null;
    session.on('action.start', (function(_this) {
      return function(project, action) {
        switch (action.id) {
          case 'compile':
            _stats.compilations += 1;
            updateStatus();
            break;
          case 'refresh':
            _stats.refreshes += 1;
            updateStatus();
        }
        if (statusClearingTimeout != null) {
          clearTimeout(statusClearingTimeout);
        }
        _customStatus = action.message + "...";
        return updateStatus();
      };
    })(this));
    session.on('action.finish', (function(_this) {
      return function(project, action) {
        if (statusClearingTimeout != null) {
          clearTimeout(statusClearingTimeout);
        }
        return statusClearingTimeout = setTimeout(function() {
          _customStatus = '';
          return updateStatus();
        }, 50);
      };
    })(this));
    if (fs.existsSync(_dataFile)) {
      try {
        data = JSON.parse(fs.readFileSync(_dataFile, 'utf8'));
      } catch (_error) {
        e = _error;
        data = null;
      }
      if (data) {
        _session.setProjectsMemento(_vfs, data.projects || []);
      }
    }
    return updateStatus();
  };

  exports.api = {
    add: function(_arg, callback) {
      var path;
      path = _arg.path;
      return callback();
    },
    remove: function(_arg, callback) {
      var id;
      id = _arg.id;
      return callback();
    },
    rpc: function(payload, callback) {
      return callback();
    },
    updateModelFromNative: function(memento, callback) {
      _session.setProjectsMemento(_vfs, memento.projects);
      return callback(null);
    },
    changeDetected: function(_arg, callback) {
      var absolutePaths;
      absolutePaths = _arg.absolutePaths;
      if (!_session) {
        return callback(null);
      }
      _session.handleExternalChange(_vfs, '/', absolutePaths);
      return callback(null);
    }
  };

  exports.setConnectionStatus = function(_arg) {
    var connectionCount;
    connectionCount = _arg.connectionCount;
    _stats.connectionCount = connectionCount;
    return updateStatus();
  };

}).call(this);
