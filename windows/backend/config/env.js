// Generated by IcedCoffeeScript 1.8.0-d
(function() {
  var EventEmitter, createRemoteApiTree, execute, fs, get, path,
    __slice = [].slice;

  fs = require('fs');

  path = require('path');

  EventEmitter = require('events').EventEmitter;

  createRemoteApiTree = require('../lib/remoteapitree').createRemoteApiTree;

  get = function(object, path) {
    var component, _i, _len, _ref;
    _ref = path.split('.');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      component = _ref[_i];
      object = object[component];
      if (!object) {
        throw new Error("Cannot find " + path);
      }
    }
    if (object.call == null) {
      throw new Error("" + path + " is not callable");
    }
    return object;
  };

  execute = function() {
    var args, callback, e, message, _i;
    message = arguments[0], args = 3 <= arguments.length ? __slice.call(arguments, 1, _i = arguments.length - 1) : (_i = 1, []), callback = arguments[_i++];
    if (message === 'rpc') {
      message = 'projects.rpc';
    }
    message = message.replace(/\.(\w+)$/, '.api.$1');
    try {
      return get(LR, message).apply(this, __slice.call(args).concat([callback]));
    } catch (_error) {
      e = _error;
      return callback(e);
    }
  };

  exports.createEnvironment = function(options, context) {
    var LR, messages;
    LR = context.apiTree;
    LR.events = new EventEmitter();
    messages = JSON.parse(fs.readFileSync(path.join(__dirname, 'client-messages.json'), 'utf8'));
    messages.pop();
    LR.client = createRemoteApiTree(messages, function(msg) {
      return function() {
        var args, _ref;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return (_ref = context.rpc).send.apply(_ref, [msg].concat(__slice.call(args)));
      };
    });
    LR.rpc = context.rpc;
    LR.rpc.on('command', execute.bind(context));
    return LR;
  };

}).call(this);
